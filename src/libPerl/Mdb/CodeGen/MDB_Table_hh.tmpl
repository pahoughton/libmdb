#ifndef _%TABLE%Table_hh_
#define _%TABLE%Table_hh_
/**
   File:        %TABLE%Table.hh
   Project:	%PRJ%
   Desc:        
  
    This class provides the interface to the Mdb %TABLE%
  
   Notes:
  
    Generated by %PERL_PKG% from %TMPL_SRC%
  
   Quick Start: - short example of class usage
  
   Author:      %AUTHOR%
   Created:     %CREATED%
  
  Revision Info: (See cvs log for revision history)
  
    $Author$
    $Date$
    $Name$
    $Revision$
    $State$

  $Id$
**/

#include <%PRJ%Config.hh>

%DATASET_HH%

#include <RBSet.hh>
#include <MapMemDynamicFixed.hh>
#include <MultiMemOffsetMapDynamic.hh>

#include <%FIELD_UTILS%.hh>

#include <FilePath.hh>
#include <DumpInfo.hh>
#include <Compare.hh>

#include <iostream>

#if defined( %PRJ_UPCASE%_DEBUG )
#define inline
#endif


class %TABLE%Table
{

public:

  struct Rec
  {
    // NEW_TABLE - not all of these will be needed.

    %FIELD_TYPES%
  };

  struct LessRec
  {
    inline bool	operator () ( const Rec & a, const Rec & b ) const;
  };
  
  %DATASET_ID_TYPE%
  typedef MultiMemOffset::Loc		Loc;
  
  typedef RBSet< Rec, LessRec >	    Table;
  typedef Table::const_iterator	    const_iterator;
  typedef Table::iterator	    iterator;
  typedef Table::pair_iterator_bool pair_iterator_bool;  
  typedef Table::size_type	    size_type;
  typedef long			    EffDate;
  
  %TABLE%Table( const char *	tableDir,
			%CNSTR_DECL_DATASET_ID_ARG%
			ios::open_mode	mode = ios::in,
			bool		create = false,
			unsigned short	permMask = 0 );

  virtual ~%TABLE%Table( void );

  inline pair_iterator_bool insert( const Rec & rec, EffDate effDate = 0 );
  
  inline bool		    add( const Rec & rec, EffDate effDate = 0  );
  
  inline const_iterator find( const Rec & rec, EffDate effDate = 0  ) const;

  // NEW_TABLE - not all field needed for find 
  %FIND_KEY_FIELDS_DELC%

  // NEW_TABLE - not all field needed for find 
  %FIND_ASCII_DELC%
  
  inline iterator	find( const Rec & rec, EffDate effDate = 0  );
  
  inline const_iterator begin( void ) const;
  inline const_iterator end( void ) const;

  inline iterator	begin( void );
  inline iterator	end( void );
  
  size_type		size( void ) const;

  %GET_DATASET_ID_DECL%
  
  inline const Rec *		getRec( MultiMemOffset::Loc loc ) const;
  inline MultiMemOffset::Loc	getRecLoc( const const_iterator & it ) const;
  
  virtual bool	    	good( void ) const;
  virtual const char * 	error( void ) const;
  virtual const char *	getClassName( void ) const;
  virtual const char *  getVersion( bool withPrjVer = true ) const;
  virtual ostream &     dumpInfo( ostream &	dest = cerr,
				  const char *  prefix = "    ",
                                  bool          showVer = true ) const;

  inline DumpInfo< %TABLE%Table >
  dump( const char * preifx = "    ", bool showVer = true ) const;

  %COPY_TABLE_DECL%
  
  static bool	    Remove( const FilePath &	tableDir );  

  static bool	    Archive( const FilePath & tableDir,
			     const FilePath & archiveDir );
  
  static const ClassVersion version;

protected:

  %ERROR_NUM_ENUM%
  
  static const char	    RecFileName[];

  FilePath		    dataFileName;
  MapMemDynamicFixed	    dataMap;
  MultiMemOffsetMapDynamic  dataMgr;
  Table			    table;
  %DATASET_ID_DECL%
  %ERROR_NUM_DECL%
  
private:

  %TABLE%Table( const %TABLE%Table & from );
  %TABLE%Table & operator =( const %TABLE%Table & from );

};

ostream &
DumpRec( ostream & dest, const %TABLE%Table::Rec & obj );

#if !defined( inline )
#include <%TABLE%Table.ii>
#else
#undef inline

int compareData( const %TABLE%Table::Rec & a,
		 const %TABLE%Table::Rec & b );

#endif


/**
   Detail Documentation
  
    Data Types: - data types defined by this header
  
    	%TABLE%Table	class
  
    Constructors:
  
    	%TABLE%Table( );
  
    Destructors:
  
    Public Interface:
  
    	virtual Bool
    	good( void ) const;
    	    Return true if there are no detected errors associated
    	    with this class, otherwise false.
  
    	virtual const char *
    	error( void ) const;
    	    Return a string description of the state of the class.
  
    	virtual const char *
    	getClassName( void ) const;
    	    Return the name of this class (i.e. %TABLE%Table )
  
    	virtual const char *
    	getVersion( bool withPrjVer = true ) const;
    	    Return the version string of this class.
  
  	virtual ostream &
  	dumpInfo( ostream & dest, const char * prefix, bool showVer );
  	    output detail info to dest. Includes instance variable
  	    values, state info & version info.
  
  	static const ClassVersion version
  	    Class and project version information. (see ClassVersion.hh)
  
    Protected Interface:
  
    Private Methods:
  
    Associated Functions:
  
   Example:
  
   See Also:
  
   Files:
  
   Documented Ver:
  
   Tested Ver:
  
**/

// Local Variables:
// mode:c++
// End:

#endif // ! def _%TABLE%Table_hh_ 

