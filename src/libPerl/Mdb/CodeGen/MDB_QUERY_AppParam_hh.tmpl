#ifndef _AppParam_hh_
#define _AppParam_hh_
/**
   File:        AppParam.hh
   Project:	%PRJ%
   Desc:        

    Command line argument processor interface for %TABLE%Query
  
   Notes:
  
    Generated by %PERL_PKG% from %TMPL_SRC%
  
   Quick Start: - short example of class usage
  
   Author:      %AUTHOR%
   Created:     %CREATED%
  
  Revision Info: (See cvs log for revision history)
  
    $Author$
    $Date$
    $Name$
    $Revision$
    $State$

  $Id$
  
**/

#include <Param.hh>
#include <Str.hh>

class AppParam : public Param
{

public:

  AppParam( int & argv, char ** argc, const char * ver = 0 );

  ~AppParam( void );

  const FilePath &  tableDir( void ) const { return( tableDirV ); };
  
  bool		    info( void ) const { return( infoV ); };
  bool		    recSize( void ) const { return( recSizeV ); };
  bool		    size( void ) const { return( sizeV ); };
  bool		    dumpTable( void ) const { return( dumpTableV ); };

  // NEW_TABLE - not all of these will be needed.
  %KEY_VALUE_METHODS%
  
  bool		parseArgs( void );
  bool		parseArgs( int argc, char * argv[] );

protected:

  FilePath  tableDirV;
  
  bool	    infoV;
  bool	    recSizeV;
  bool	    histSizeV;
  bool	    sizeV;
  
  bool	    dumpTableV;

  // NEW_TABLE - not all of these will be needed.
  %KEY_VALUE_VARS%
  
private:

  AppParam( const AppParam & copyFrom );
  AppParam & operator=( const AppParam & assignFrom );

};

extern AppParam * App;

/**
    Data Types: - data types defined by this header
  
    	AppParam	class
  
    Constructors:
  
    	AppParam( );
  
    Destructors:
  
    Public Interface:
  
    	virtual const char *
    	getClassName( void ) const;
    	    Return the name of this class (i.e. AppParam )
  
    	virtual Bool
    	good( void ) const;
    	    Returns true if there are no detected errors associated
    	    with this class, otherwise FALSE.
  
    	virtual const char *
    	error( void ) const
    	    Returns as string description of the state of the class.
  
    Protected Interface:
  
    Private Methods:
  
    Other Associated Functions:
  
    	ostream &
    	operator <<( ostream & dest, const AppParam & obj );
  
**/  

// Local Variables:
// mode:c++
// End:

#endif // ! def _AppParam_hh_ 
