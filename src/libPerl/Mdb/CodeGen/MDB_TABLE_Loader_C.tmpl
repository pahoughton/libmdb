/**
   File:        %TABLE%Table.hh
   Project:	%PRJ%
   Desc:        
  
    Implementation of the interface to the Mdb %TABLE% Loader
  
   Notes:
  
    Generated by %PERL_PKG% from %TMPL_SRC%
  
   Author:      %AUTHOR%
   Created:     %CREATED%
  
   Revision History: (See end of file for Revision Log)
  
    Last Mod By:    $Author$
    Last Mod:	    $Date$
    Version:	    $Revision$
  
    $Id$
**/

#include "%TABLE%Loader.hh"

#include <FileBatch.hh>

#include <%FIELD_UTILS%.hh>

#include <FileStat.hh>
#include <StlUtilsMisc.hh>

#include <LibLog.hh>
#include <Str.hh>

#if defined( %PRJ_UPCASE%_DEBUG )
#include "%TABLE%Loader.ii"
#endif

%PRJ_UPCASE%_VERSION(
  %TABLE%Loader,
  "$Id$");


%TABLE%Loader::%TABLE%Loader( 
  const FilePath &  tableDirectory,
  %CNSTR_DATASET_ID_ARG%
  const DateTime &  earliestHistDate
  )
  : dataSetId( dsId ),
    prevDataSetId( 0 ),
    tableDir( tableDirectory ),
    loadDir( DataSet::getDataSetDir( tableDir, dataSetId ) ),
    table( 0 ),
    create( true ),
    minHistDate( earliestHistDate ),
    errorNum( E_OK )
{
  if( ! Table::Remove( loadDir ) )
    return;

  table = new Table( loadDir,
		     dataSetId,
		     (ios::open_mode)
		     (ios::in | ios::out | ios::noreplace),
		     true,
		     002 );

}

%TABLE%Loader::~%TABLE%Loader( void )
{
  if( table ) delete table;
}

bool
%TABLE%Loader::from(
  const FilePath &  dataFn,
  const FilePath &  archiveDir,
  const FilePath &  errorDir,
  time_t	    archiveTimeStamp
  )
{
  LLgInfo << "Loading "
	  << (*table).getClassName()
	  << " from "
	  << dataFn
	  << endl;

  bool status( true );

  procRecCount = 0;

  {
    const FileBatch< DataRec >	batch( dataFn );
    
    if( ! batch.good() ) {
      LLgError << batch.error() << endl;
      status = false;
    }
  
    for( FileBatch< DataRec >::const_iterator them = batch.begin();
	 status && them != batch.end();
	 ++ them ) {
      ++ procRecCount;
    
      Table::Rec   rec;

      // NEW_TABLE - POSSIBLY not all of these will be needed.
      %COPY_FIELDS%
	 
      if( (*_LibLog).willOutput( LogLevel::Debug ) ) {
	LLgDebug << "DataRec:\n";
	DumpRec( (*_LibLog), (*them) ) << endl;
	LLgDebug << "Table Rec:\n";
	DumpRec( (*_LibLog), rec ) << endl;
      }
    
      if( ! (*table).add( rec ) ) {
	LLgError << "add failed - " << (*table).error()
		 << " from:\n"
		 << "    " << dataFn << ":" << procRecCount
		 << endl;
	status = false;
      } 
    }
  }

  if( status && archiveDir.size() ) {
    status = ArchiveFile( dataFn, archiveDir, archiveTimeStamp, true );
  }

  LLgInfo
    << "Load " << (*table).getClassName() 
    << ( status ? " complete." : " FAILED." ) << '\n'
    << "       data recs processed: " << procRecCount << '\n'
    << "                table size: " << (*table).size() << '\n'
    << endl;

  return( status );
}


  

bool
%TABLE%Loader::good( void ) const
{
  return( errorNum == E_OK && table && (*table).good() );
}

const char *
%TABLE%Loader::error( void ) const
{
  static Str errStr;

  errStr = %TABLE%Loader::getClassName();

  if( good() )
    {
      errStr << ": ok";
    }
  else
    {
      size_t eSize = errStr.size();

      if( ! table )
	{
	  errStr << ": table not allocated.";
	}
      else
	{
	  if( ! (*table).good() )
	    errStr << ": " << (*table).error();
	}

      if( eSize == errStr.size() )
        errStr << ": unknown error";
    }

  return( errStr.c_str() );
}

const char *
%TABLE%Loader::getClassName( void ) const
{
  return( "%TABLE%Loader" );
}

const char *
%TABLE%Loader::getVersion( bool withPrjVer ) const
{
  return( version.getVer( withPrjVer ) );
}

bool
%TABLE%Loader::checkForFiles(
  bool		    full,
  const FilePath &  dataFn
  )
{
  bool status( true );
  FileStat stat( dataFn );
  if( ! stat.good() ) {
    LLgError << stat.error() << endl;
    status = false;
  } else {
    if( stat.getSize() % sizeof( DataRec ) ) {
      LLgError << "data file size not a multiple of " << sizeof( DataRec )
	       << "\n    '" << dataFn << "'"
	       << endl;
      status = false;
    }
  }
  return( status );
}

ostream &
%TABLE%Loader::dumpInfo(
  ostream &	dest,
  const char *	prefix,
  bool		showVer
  ) const
{
  if( showVer )
    dest << %TABLE%Loader::getClassName() << ":\n"
	 << %TABLE%Loader::getVersion() << '\n';

  if( ! %TABLE%Loader::good() )
    dest << prefix << "Error: " << %TABLE%Loader::error() << '\n';
  else
    dest << prefix << "Good" << '\n';

  if( table )
    {
      Str pre;
      pre = prefix;
      pre << "table:";
      (*table).dumpInfo( dest, pre, false );
    }


  return( dest );
}

ostream &
DumpRec( ostream & dest, const %TABLE%Loader::DataRec & rec )
{
  %DUMP_FIELDS%

  return( dest );
}


// Revision Log:
//
// %PL%
//

// Local Variables:
// mode:c++
// End:

