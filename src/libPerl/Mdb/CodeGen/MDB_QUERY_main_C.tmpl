/**
   File:        %TABLE%Table.hh
   Project:	%PRJ%
   Desc:        
  
    Application entry point for %TABLE%Query
  
   Notes:
  
    Generated by %PERL_PKG% from %TMPL_SRC%
  
   Author:      %AUTHOR%
   Created:     %CREATED%
  
  Revision Info: (See cvs log for revision history)
  
    $Author$
    $Date$
    $Name$
    $Revision$
    $State$
  
  $Id$

**/

#include "%PRJ%Config.hh"
#include "AppParam.hh"
#include <%TABLE%Table.hh>

#include <iostream>

AppParam * App = 0;

%PRJ_UPCASE%_FUNCT_VERSION(
  main,
  "$Id$");

typedef %TABLE%Table   QueryTable;

int
main( int argc, char * argv[] )
{

  if( (App = new AppParam( argc, argv, VERID_main ) ) == 0 ) {
    cerr << "Can't new AppParam." << endl;
    exit( 1 );
  }

  if( ! (*App).good() || (*App).help() || ! (*App).allArgs() )
    (*App).abort( 1, true, __FILE__, __LINE__ );

  bool status( true );

  AppInfo << (*App).appName() << "(" << (*App).getpid()
          << ") started." << endl;

  if( (*App).recSize() ) {
    AppInfo << "record size is: "
	    << sizeof( %TABLE%Table::Rec )
	    << endl;
  }

  const QueryTable   table( (*App).tableDir() );

  if( ! table.good() ) {
    AppError << table.error() << endl;
    status = false;
  }
  
  if( (*App).info() ) {
    AppInfo << table.getClassName() << " Info: "
	    << table.dump() << endl;
  }

  if( status ) {
    if( (*App).size() ) {
      AppInfo << "records in table: " << table.size() << endl;
    }
      
    if( (*App).dumpTable() ) {
      AppInfo << table.getClassName() << " all records:\n";
      for( QueryTable::const_iterator them = table.begin();
	   them != table.end();
	   ++ them ) {
	DumpRec( (*App).log(), (*them) ) << endl;
      }
    }

    if( (*App).FIXME().size() ) {  
      // NEW_TABLE - not all of these will be needed.
      QueryTable::const_iterator it( table.find(
	%KEY_APP_ARGS%
	) );
      
      if( it != table.end() ) {
	// NEW_TABLE - not all of these will be needed.
	AppInfo << "Found:\n"
	        %KEY_FIELDS_OUT%
		<< endl;
	
	DumpRec( (*App).log(), *it ) << endl;
      } else {
	// NEW_TABLE - not all of these will be needed.
	AppError << "Not found:\n"
		 %KEY_FIELDS_OUT%
		 << endl;
	status = false;
      }
    }
  }


  if( status )
    AppInfo << (*App).appName() << "(" << (*App).getpid()
            << ") completed." << endl;
  else
    AppError << (*App).appName() << "(" << (*App).getpid()
             << ") ABROTED(1)!" << endl;

  delete App;

  return( status ? 0 : 1 );
}

// Local Variables:
// mode:c++
// End:

