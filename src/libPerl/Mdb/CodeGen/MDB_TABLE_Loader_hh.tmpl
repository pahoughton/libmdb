#ifndef _%TABLE%Loader_hh_
#define _%TABLE%Loader_hh_
/**
   File:        %TABLE%Table.hh
   Project:	%PRJ%
   Desc:        
  
    This class provides the interface to the Mdb %TABLE% Loader
  
   Notes:
  
    Generated by %PERL_PKG% from %TMPL_SRC%
  
   Quick Start: - short example of class usage
  
   Author:      %AUTHOR%
   Created:     %CREATED%
  
   Revision History: (See end of file for Revision Log)
  
    Last Mod By:    $Author$
    Last Mod:	    $Date$
    Version:	    $Revision$
  
    $Id$
**/

#include <%PRJ%Config.hh>

#include <%TABLE%Table.hh>

#include <DateTime.hh>
#include <DumpInfo.hh>

#include <iostream>

#if defined( %PRJ_UPCASE%_DEBUG )
#define inline
#endif

class %TABLE%Loader
{

public:

  struct DataRec
  {
    %FIELD_TYPES%

    // NEW_TABLE - ajust size or eliminated fill as needed.
    char	    fill[ 1 ];
  };
  
  typedef %TABLE%Table	Table;

  %DATASET_ID_TYPE%
  typedef Table::Rec		Rec;
  
  %TABLE%Loader( const FilePath &	tableDir,
			%CNSTR_DATASET_ID_ARG%
		 const DateTime &	earliestHistDate );

  virtual ~%TABLE%Loader( void );

  bool	    from( const FilePath &  dataFn,
		  const FilePath &  archiveDir,
		  const FilePath &  errorDir,
		  time_t	    archiveTimeStamp );
  
  static bool	checkForFiles( bool		full,
			       const FilePath &	dataFn );
  
  virtual bool	    	good( void ) const;
  virtual const char * 	error( void ) const;
  virtual const char *	getClassName( void ) const;
  virtual const char *  getVersion( bool withPrjVer = true ) const;
  virtual ostream &     dumpInfo( ostream &	dest = cerr,
				  const char *  prefix = "    ",
                                  bool          showVer = true ) const;

  inline DumpInfo< %TABLE%Loader >
  dump( const char * preifx = "    ", bool showVer = true ) const;

  static const ClassVersion version;

protected:

  enum ErrorNum
  {
    E_OK,
    E_COPY,
    E_UNDEFINED
  };

  DataSetId dataSetId;
  DataSetId prevDataSetId;
  FilePath  tableDir;
  FilePath  loadDir;
  FilePath  prevDir;

  bool		create;
  Table *	table;

  DateTime	minHistDate;
  size_t	procRecCount;
  
  ErrorNum	errorNum;
  
private:

  %TABLE%Loader( const %TABLE%Loader & from );
  %TABLE%Loader & operator =( const %TABLE%Loader & from );

};

ostream &
DumpRec( ostream & dest, const %TABLE%Loader::DataRec & obj );

#if !defined( inline )
#include <%TABLE%Loader.ii>
#else
#undef inline


#endif



/**
   Detail Documentation
  
    Data Types: - data types defined by this header
  
    	%TABLE%Loader	class
  
    Constructors:
  
    	%TABLE%Loader( );
  
    Destructors:
  
    Public Interface:
  
  	virtual ostream &
  	write( ostream & dest ) const;
  	    write the data for this class in binary form to the ostream.
  
  	virtual istream &
  	read( istream & src );
  	    read the data in binary form from the istream. It is
  	    assumed it stream is correctly posistioned and the data
  	    was written to the istream with 'write( ostream & )'
  
  	virtual ostream &
  	toStream( ostream & dest ) const;
  	    output class as a string to dest (used by operator <<)
  
  	virtual istream &
  	fromStream( istream & src );
  	    Set this class be reading a string representation from
  	    src. Returns src.
  
    	virtual Bool
    	good( void ) const;
    	    Return true if there are no detected errors associated
    	    with this class, otherwise false.
  
    	virtual const char *
    	error( void ) const;
    	    Return a string description of the state of the class.
  
    	virtual const char *
    	getClassName( void ) const;
    	    Return the name of this class (i.e. %TABLE%Loader )
  
    	virtual const char *
    	getVersion( bool withPrjVer = true ) const;
    	    Return the version string of this class.
  
  	virtual ostream &
  	dumpInfo( ostream & dest, const char * prefix, bool showVer );
  	    output detail info to dest. Includes instance variable
  	    values, state info & version info.
  
  	static const ClassVersion version
  	    Class and project version information. (see ClassVersion.hh)
  
    Protected Interface:
  
    Private Methods:
  
    Associated Functions:
  
    	ostream &
    	operator <<( ostream & dest, const %TABLE%Loader & src );
  
  	istream &
  	operator >> ( istream & src, %TABLE%Loader & dest );
  
   Example:
  
   See Also:
  
   Files:
  
   Documented Ver:
  
   Tested Ver:
  
   Revision Log:
  
   $Log$
   Revision 1.1  2003/06/08 18:03:40  houghton
   Initial Version

   
**/

// Local Variables:
// mode:c++
// End:

#endif // ! def _%TABLE%Loader_hh_ 

