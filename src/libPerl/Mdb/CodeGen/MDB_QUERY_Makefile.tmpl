#
# Title:        make.cfg.template.prog
# Project:	%PRJ%
# Desc:
# 
#   Makefile for building the c/c++ program %TABLE%Query.
# 
# Notes:
# 
#   This Makefile was generated by MakeConfigs GenMakefile. It
#   requires MakeConfigs and GNU's make version 3.79 to
#   build its targets.
#
#   See Detail Documentation the end of the file for more information
#
#   Try 'make help' for a list of standard targets.
# 
# Author:	%AUTHOR%
# Created:	%CREATED
#
# Revision Info: (See cvs log for revision history)
#  
#   $Author$
#   $Date$
#   $Name$
#   $Revision$
#   $State$
#
#   $Id$

#
# The following variables control the behavior of MakeConfigs.
#   makefile_type   is the type of object being build (do NOT change)
#   make_cfg_ver    is the version of MakeConfigs to use
#   make_target	    is the default target to build
#   show_commands   if this is true, the commands  will be output
#   proto_dep	    if this is true, the proto header will be rebuild when
#		    one of it's dependancies changes (ie a .c source)
#   check_install   if this is true, install and install_all will NOT
#		    overwrite an installed version.
#

makefile_type   = prog
make_cfg_ver	= 6.01
make_target	= default
show_commands 	= # true
proto_dep	= true
check_install	= true
force		= # true

PRJ_TOPDIR		= ../..
config_dir  	= $(PRJ_TOPDIR)/src/config

PROJECT_NAME	= %PRJ%
NAME		= %TABLE%Query

INSTALL_BASE_DIR	= $(PRJ_TOPDIR)
INSTALL_BIN_DIR		= $(INSTALL_BASE_DIR)/bin

VER_MAJOR	= 1
VER_MINOR	= 00
VER_RELEASE	= 00.a.01
VERSION		= $(VER_MAJOR).$(VER_MINOR).$(VER_RELEASE)


include $(PRJ_TOPDIR)/src/config/00-Makefile.cfg
include Make/make.cfg.$(make_cfg_ver)

# 
# =USE_CURRENT_MAKEFILE=
# When you re-gen a make file, every thing between 
# these tags will be kept int the new makefile
# if you want it re-gen'd, just delete the tags
#

PROGRAM_DEFAULT	= $(NAME)_s
PROGRAM_DEBUG	= $(NAME)_g
PROGRAM_TEST	= $(NAME)_tg
PROGRAM_PROFILE	= $(NAME)_pg
PROGRAM_STATIC	= $(NAME)_static
PROGRAM_SHARED	= $(NAME)

# PROTO_H		= _$(NAME)_Proto.h

# include any arch specific makefile component
-include $(PRJ_TOPDIR)/src/arch/$(arch)/Makefile.$(NAME)

VPATH		= $(ARCH_VPATH):.

###### D E F I N E S  #####
#
# Config defines available
#
#


APP_STR_DEFINES	=			\
	RUN_DATA_TABLES_DIR

APP_VAL_DEFINES	=			\

SRC_DEFINES	= -DVERSION=\"$(VERSION)\" $(ARCH_DEFINES)
PRJ_DEFINES	=

DEFAULT_DEFINES = -DTRSQUERY_DEFAULT=1
DEBUG_DEFINES	= -DTRSQUERY_DEBUG=1 -D%PRJ%_DEBUG=1
TEST_DEFINES	= -DTRSQUERY_TEST=1 $(DEBUG_DEFINES)
PROFILE_DEFINES	= -DTRSQUERY_PROFILE=1
STATIC_DEFINES	= -DTRSQUERY_STATIC=1
SHARED_DEFINES	= -DTRSQUERY_SHARED=1

######  I N C L U D E S #####
#
# Config includes available (need to use -I)
#
# $(alpha_incdir) 	$(beta_incdir) 	$(local_incdir)
#


SRC_INC		= $(ARCH_INC) -I. 				\
		  -I$(PRJ_TOPDIR)/src/lib%PRJ%			\
		  -I$(PRJ_TOPDIR)/src/%LIB_TABLES_DIR%
PRJ_INC		=  $(SUPPORT_INC_DIRS)

# Any other cpp flags to use on for all targets

CPP_FLAGS		= $(ARCH_CPP_FLAGS)

FLEX_FLAGS		=
BISON_FLAGS		=

###### C O M P I L E / C P P #####
#
# Config flags available
#
# $(cc_optimize_flags) $(cxx_optimize_flags)
# $(cc_debug_flags)    $(cxx_debug_flags)
# $(cc_profile_flags)  $(cxx_profile_fllags)
# $(cc_warn)           $(cxx_warn)
#


CC_OTHER		=

CC_FLAGS		= $(ARCH_CC_FLAGS) $(CC_OTHER)

DEFAULT_CC_FLAGS	= $(cc_optimize_flags)
DEBUG_CC_FLAGS		= $(cc_debug_flags)
TEST_CC_FLAGS		= $(cc_debug_flags)
PROFILE_CC_FLAGS	= $(cc_profile_flags)
STATIC_CC_FLAGS		= $(cc_optimize_flags)
SHARED_CC_FLAGS		= $(cc_shared_flags) $(cc_optimize_flags)

CXX_OTHER		=

CXX_FLAGS		= $(cxx_warn) $(ARCH_CXX_FLAGS) $(CXX_OTHER)

DEFAULT_CXX_FLAGS	= $(cxx_optimize_flags)
DEBUG_CXX_FLAGS		= $(cxx_debug_flags)
TEST_CXX_FLAGS		= $(cxx_debug_flags)
PROFILE_CXX_FLAGS	= $(cxx_profile_flags)
STATIC_CXX_FLAGS	= $(cxx_optimize_flags)
SHARED_CXX_FLAGS	= $(cxx_shared_flags) $(cxx_optimize_flags)

# **** I N S T A L L ****

INSTALL_BIN_PERM	= 555
INSTALL_BIN_FLAGS	= -m $(INSTALL_BIN_PERM)

# ##### L I N K  /  L I B R A R I E S #####
#
# Config flags available
#
# $(ld_optimize_flags)
# $(ld_debug_flags)
# $(ld_profile_flags)
# $(ld_static_flags)
#
# Config library directories available (need to use -L)
#
# $(alpha_libdir)	$(beta_libdir)	$(local_libdir)
#
# Config libraries available
#
#   $(wcf_libs)
#   $(x11_libs)       $(xt_libs)         $(motif_libs)
#   $(sybase_ct_libs) $(sybase_db_libs)


LD_FLAGS		= $(ARCH_LD_FLAGS) $(LD_OTHER)

DEFAULT_LD_FLAGS	= $(ld_optimize_flags)
DEBUG_LD_FLAGS		= $(ld_debug_flags)
TEST_LD_FLAGS		= $(ld_debug_flags)
PROFILE_LD_FLAGS	= $(ld_profile_flags)
STATIC_LD_FLAGS		= $(ld_static_flags) $(ld_optimize_flags)
SHARED_LD_FLAGS		= $(ld_shared_flags) $(ld_optimize_flags)

LD_LIBDIRS		= $(SUPPORT_LIB_DIRS) 

DEFAULT_LD_LIBDIRS	= -L$(PRJ_TOPDIR)/src/lib%PRJ%		\
			  -L$(PRJ_TOPDIR)/src/lib%PRJ%Tables
DEBUG_LD_LIBDIRS	= $(DEFAULT_LD_LIBDIRS)
TEST_LD_LIBDIRS		= $(DEBUG_LD_LIBDIRS)
PROFILE_LD_LIBDIRS	= $(DEFAULT_LD_LIBDIRS)
STATIC_LD_LIBDIRS	= $(DEFAULT_LD_LIBDIRS)
SHARED_LD_LIBDIRS	= $(DEFAULT_LD_LIBDIRS)

LD_LIBS			= $(SUPPORT_LIBS)

DEFAULT_LD_LIBS		= -l%PRJ% -l%PRJ%Tables
DEBUG_LD_LIBS		= -l%PRJ%_g -l%PRJ%Tables_g
TEST_LD_LIBS		= $(DEBUG_LD_LIBS)
PROFILE_LD_LIBS		= $(DEFAULT_LD_LIBS)
STATIC_LD_LIBS		= $(DEFAULT_LD_LIBS)
SHARED_LD_LIBS		= $(DEFAULT_LD_LIBS)

#
# =USE_CURRENT_MAKEFILE=
#

# **** S O U R C E   F I L E S ****

GENERATED_SOURCES	=			

FLEX_C_SOURCES	=			
BISON_C_SOURCES	=			
FLEX_CXX_C_SOURCES	=			
BISON_CXX_C_SOURCES	=			
C_SOURCES	=			\
	$(ARCH_C_SOURCES)               \

CXX_C_SOURCES	=			\
	AppParam.C                      \
	main.C                          \
	$(ARCH_CXX_C_SOURCES)           \

CXX_CC_SOURCES	=			\
	$(ARCH_CXX_CC_SOURCES)          \

CXX_CPP_SOURCES	=			\
	$(ARCH_CXX_CPP_SOURCES)         \


USER_H_INCS	=			\
	$(ARCH_USER_H_INCS)             \

USER_HH_INCS	=			\
	AppParam.hh                     \
	$(ARCH_USER_HH_INCS)            \

USER_II_INCS	=			\
	$(ARCH_USER_II_INCS)            \

USER_INCLUDES	=		\
	$(USER_H_INCS)		\
	$(USER_HH_INCS)		\
	$(USER_II_INCS)		\

C_HEADERS	=			\
	$(ARCH_C_HEADERS)               \

CXX_HEADERS	=			\
	AppParam.hh                     \
	$(ARCH_CXX_HEADERS)             \

CXX_INLINES	=			\
	$(ARCH_CXX_INLINES)             \



###### T A R G E T S #####
#
# Build the `help' or `targets' target for a list of
# available top-level targets and what they do.
#


include Make/make.cfg.targets.$(makefile_type).$(make_cfg_ver)

ifneq ($(strip $(APP_STR_DEFINES) $(APP_VAL_DEFINES)),)
AppDefines.h: $(PRJ_TOPDIR)/src/config/00-Makefile.cfg Makefile
	$(hide) echo '/* This source is generated from 00-Makefile.cfg */' > $@
	$(hide) $(foreach var,$(APP_STR_DEFINES),			  \
		echo '#define $(var)		"$($(var))"' >> $@; )
	$(hide) $(foreach var,$(APP_VAL_DEFINES),			  \
		echo '#define $(var)		$($(var))' >> $@; )
	$(hide) echo "Generated $@"

.depend_debug .depend_default .depend_shared .depend_test: AppDefines.h
endif

default debug test profile static shared:: $(generated_files)

default:: $(PROGRAM_DEFAULT)

debug test profile static shared::
	$(hide) $(MAKE) make_target=$@ $(PROGRAM_$($@))

all::	default debug test profile shared

install:: install_$(make_target)
	$(hide) echo + Installation Complete!

install_all:: 

install_all:: install_default install_debug install_profile install_static
	$(hide) echo + Installation Complete!

install_default::
	$(hide) $(MAKE) make_target=default			\
			$(INSTALL_BIN_DIR)/$(PROGRAM_DEFAULT)
install_debug::   
	$(hide) $(MAKE) make_target=debug			\
			$(INSTALL_BIN_DIR)/$(PROGRAM_DEBUG)
install_test::    
	$(hide) $(MAKE) make_target=test			\
			$(INSTALL_BIN_DIR)/$(PROGRAM_TEST)
install_profile:: 
	$(hide) $(MAKE) make_target=profile			\
			$(INSTALL_BIN_DIR)/$(PROGRAM_PROFILE)
install_static::  
	$(hide) $(MAKE) make_target=static			\
			$(INSTALL_BIN_DIR)/$(PROGRAM_STATIC)
install_shared::  
	$(hide) $(MAKE) make_target=shared			\
			$(INSTALL_BIN_DIR)/$(PROGRAM_SHARED)

#
# include dependancies generated by 'make depend'
#
-include .depend_$(make_target)

# Detail Documentation
#
# General Information
#
#	Do not be daunted by the number of variables and targets. The
#	MakeConfigs system has a tremendous amount of functionality
#	built into it. All you really need to do is list your sources
#	in the appropriate section and build the targets (debug,
#	default, profile & shared). But, if you have to perform actions
#	that are beyond the default targets, these targets and
#	variables are available for your use.
#
#	You should probably start by building the `depend' target so
#	that all of the dependencies will be generated for you. What
#	this does is scan the source modules for include files and the
#	creates a dependency so if the include file changes the object
#	will be recompiled from the source.
#
#	One of the features of MakeConfigs is that you can build all
#	the various version (default, debug, profiled, shared) of the
#	target without having to clean up the objects between
#	them. This is because the object files are kept in different
#	directories under the 'objects' directory.
#
# Control Variables
#
#   show_commands   if this is true, the commands  will be output
#
#   make_target	    is the default target to build
#
#   proto_dep	    if this is true, the proto header will be rebuild when
#
#   check_install   if this is true, install and install_all will NOT
#		    overwrite an installed version.
#
#   force	    If this is not empty, force the rebuild of all
#		    targets even if none of the dependencies are out
#		    of date.
#
#
# Target Variables
#
#   NAME	    The name of the library to build not
#		    (i.e. NAME=Cool the default lib will be libCool.a)
#
#   PRJ_TOPDIR	    This is the project's top directory (i.e. all
#		    the projects files are within subdirectories
#		    under this directory). The Generated Makefile
#		    contains a PRJ_TOPDIR variable the points to
#		    this directory by determining how many
#		    directory levels up the current directory is
#		    from the `topdir' and using that number of
#		    `..' sets. Fore example, if the `topdir' is
#		    /prj/libCool and the current directory is
#		    /prj/libCool/src/Cool, the PRJ_TOPDIR would be
#		    set to `../..' (i.e this directory is 2
#		    levels down from the `topdir'.
#
#   VER_MAJOR		Major version number (i.e. the 1 in 1.2.3).
#
#   VER_MINOR		Minor version number (i.e. the 2 in 1.2.3).
#
#   VER_RELEASE		Release number (i.e. the 3 in 1.2.3).
#
#   PROGRAM_DEFAULT	The program name to create when building the
#			default target.
#
#   PROGRAM_DEBUG	The program name to create when building the
#			debug target.
#
#   PROGRAM_TEST	The program name to create when building the
#			test target.
#
#   PROGRAM_PROFILE	The program name to create when building the
#			profile target.
#
#   PROGRAM_SHARED	The program name to create when building the
#			shared target.
#
# Install Variables
#
#   INSTALL_BASE_DIR	Base directory to install the include files
#			and the libraries.
#
#   INSTALL_BIN_DIR	Directory to install program file. The
#			default is $(INSTALL_BASE_DIR)/bin.
#
#   INSTALL_BIN_PERM	The permissions to pass the install command
#			when installing the library
#
#   INSTALL_BIN_FLAGS	The command line arguments to pass the install
#			command when installing the program.
#
# Preprocessor Variables
#
#   SRC_DEFINES	    These are defines that apply only to the compiles in
#		    this directory.
#
#   PRJ_DEFINES	    These are defines that would be passed on to
#		    compiles in other subdirectories.
#
#   DEFAULT_DEFINES These are only used when building the default
#		    optimized static library.
#
#   DEGUG_DEFINES   These are only used when building the debug
#		    version of the library.  
#
#   TEST_DEFINES    These are only used when building the test version
#		    of the library.
#
#   PROFILE_DEFINES These are only used when building the profile
#		    version of the library.
#
#   SHARED_DEFINES  These are only used when building the shared
#		    version of the library.
#
#   SRC_INC	    The include directives that only apply to compiles
#		    in this directory.
#
#   PRJ_INC	    The include directives that would be passed on to
#		    compiles in other subdirectories.
#
#   CPP_FLAGS	    Other flags to pass the preprocessor (cpp).
#
# C Language Compile Constants
#
#   cc_warn		set by the platform specific configuration
#			file to generate compile time warning messages.
#
#   cc_optimize_flags	set by the platform specific configuration
#			file to generate object files that have been
#			highly optimized for speed.
#
#   cc_debug_flags	set by the platform specific configuration
#			file to generate object files that include the
#			largest amount of debugging information
#			available.
#
#   cc_profile_flags	set by the platform specific configuration
#			file to include profiling information for
#			performance testing.
#
#   cc_shared_flags	set by the platform specific configuration
#			file to generate dynamically loadable object
#			files.
#
# C Language Compile Variables
#
#   CC_OTHER		normally this is left un-set so addition flags
#			can be passed to the compiler from the make
#			command (i.e. make debug CC_OTHER=-H).
#
#   CC_FLAGS		These are flags to pass the C compiler along
#			with the target specific flags.
#
#   DEFAULT_CC_FLAGS	The set of flags to pass the C compiler only
#			when building default target objects.
#			
#   DEBUG_CC_FLAGS	The set of flags to pass the C compiler only
#			when building debug target objects.
#			
#   TEST_CC_FLAGS	The set of flags to pass the C compiler only
#			when building test target objects.
#			
#   PROFILE_CC_FLAGS	The set of flags to pass the C compiler only
#			when building profile target objects.
#			
#   SHARED_CC_FLAGS	The set of flags to pass the C compiler only
#			when building shared target objects.
#
# C++ Language Compile Constants
#
#   cxx_warn		set by the platform specific configuration
#			file to generate compile time warning messages.
#
#   cxx_optimize_flags	set by the platform specific configuration
#			file to generate object files that have been
#			highly optimized for speed.
#
#   cxx_debug_flags	set by the platform specific configuration
#			file to generate object files that include the
#			largest amount of debugging information
#			available.
#
#   cxx_profile_flags	set by the platform specific configuration
#			file to include profiling information for
#			performance testing.
#
#   cxx_shared_flags	set by the platform specific configuration
#			file to generate dynamically loadable object
#			files.
#
# C++ Language Compile Variables
#
#   CXX_OTHER		normally this is left un-set so addition flags
#			can be passed to the compiler from the make
#			command (i.e. make debug CXX_OTHER=-H) 
#
#   CXX_FLAGS		These are flags to pass the C++ compiler along
#			with the target specific flags. 
#
#   DEFAULT_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building default target objects.
#			
#   DEBUG_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building debug target objects.
#			
#   TEST_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building test target objects.
#			
#   PROFILE_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building profile target objects.
#			
#   SHARED_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building shared target objects.
#
#   PROTO_H		The name of the file to contain the function
#			prototypes for C sources.
#
# Link Variables
#
#   LD_OTHER		normally this is left un-set so additional
#			flags can be passed to the linker from the
#			make command (i.e. make debug LD_OTHER=-i).
#
#   LD_FLAGS		These are the flags to pass the linker along
#			with the target specific flags.
#
#   DEFAULT_LD_FLAGS	The set of flags to pass the linker only when
#			linking the default program.
#
#   DEBUG_LD_FLAGS	The set of flags to pass the linker only when
#			linking the debug program.
#
#   TEST_LD_FLAGS	The set of flags to pass the linker only when
#			linking the test program.
#
#   PROFILE_LD_FLAGS	The set of flags to pass the linker only when
#			linking the profile program.
#
#   SHARED_LD_FLAGS	The set of flags to pass the linker only when
#			linking the shared program.
#
#   LD_LIBDIRS		These are library directory flags
#			(i.e. -L../src/libMyStuff) that are passed to
#			the linker along with the target specific
#			library directory flags.
#
#   DEFAULT_LD_LIBDIRS	The set of library directories to pass the
#			linker when building the default target.
#
#   DEBUG_LD_LIBDIRS	The set of library directories to pass the
#			linker when building the debug target.
#
#   TEST_LD_LIBDIRS	The set of library directories to pass the
#			linker when building the test target.
#
#   PROFILE_LD_LIBDIRS	The set of library directories to pass the
#			linker when building the profile target.
#
#   SHARED_LD_LIBDIRS	The set of library directories to pass the
#			linker when building the shared target.
#
#   LD_LIBS		These are rthe library flags (i.e. -lCommon)
#			to pass the linker along with the target
#			specific library flags.
#
#   DEFAULT_LD_LIBS	The set of library flags to pass the linker
#			when building the default target.
#
#   DEBUG_LD_LIBS	The set of library flags to pass the linker
#			when building the default target.
#
#   TEST_LD_LIBS	The set of library flags to pass the linker
#			when building the default target.
#
#   PROFILE_LD_LIBS	The set of library flags to pass the linker
#			when building the default target.
#
#   SHARED_LD_LIBS	The set of library flags to pass the linker
#			when building the default target.
#
# Source Variables
#
#   C_SOURCES		C .c sources to compile.
#
#   CXX_C_SOURCES	C++ .C sources to compile.
#
#   CXX_CC_SOURCES	C++ .cc sources to compile.
#
#   CXX_CPP_SOURCES	C++ .cpp sources to compile.
#
#   BISON_C_SOURCES	bison .y files to compile into .c sources.
#
#   FLEX_C_SOURCES	flex .l files to compile into .c sources.
#
#   BISON_CXX_C_SOURCES	bison .y files to compile into c++ .C sources.
#
#   FLEX_CXX_C_SOURCES	flex .l files to compile into c++ .C sources.
#
#   C_HEADERS		All C header files (.h)
#
#   CXX_HEADERS		All C++ header files (.hh)
#
#   CXX_INLINES		All C++ inline function files (.ii)
#
#   USER_H_INCS		The C header files to install.
#
#   USER_HH_INCS	The C++ header files to install.
#
#   USER_II_INCS	The C++ incline function files to install.
#
#   USER_INCLUDES	include files (.h, .hh, .ii) to install.
#
# Targets
#
#   depend:          Generate the dependency file for the default target.
# 
#   depend_debug:    Generate the dependency file for the debug target.
# 
#   depend_default:  Generate the dependency file for the default target.
# 
#   depend_test:     Generate the dependency file for the test target.
# 
#   depend_profile:  Generate the dependency file for the profile target.
# 
#   depend_shared:   Generate the dependency file for the shared target.
# 
#   depend_all:      Generate all the dependency files for all the targets.
# 
#   debug:           Make a debug version of the top-level target.
# 
#   test:            Make a version of the top-level target for testing.
# 
#   profile:         Make a version of the top-level target that has profile
#                    information to help resolve performance problems
# 
#   shared:          Make a version of the top-level target that uses shared
#                    libraries or is a shared library.
# 
#   install_test:    Install the test version of the top-level target.
# 
#   install_debug:   Install the debug version of the top-level target.
# 
#   install_default: Copy the default top-level target file into a directory
#                    the users typically search for it; copy any auxiliary
#                    files that the target uses into the directories where it
#                    will look for them.
# 
#   install_profile: Install the profile version of the top-level target.
# 
#   install_shared:  Install the shared version of the top-level target.
# 
#   all:             Make all the top-level targets the makefile knows about.
# 
#   default:         Make the default top-level target.
# 
#   check:           Perform self tests on the program or target this
#                    makefile builds
# 
#   install:         Copy the default top-level target file into a directory
#                    the users typically search for it; copy any auxiliary
#                    files that the target uses into the directories where it
#                    will look for them.
# 
#   install_all:     Copy the all the top-level target files into directories
#                    that users typically search for them; copy any auxiliary
#                    files that the target files use into the directories
#                    where they will look for them.
# 
#   clean:           Delete all files that are normally created by running
#                    make.
# 
#   realclean:       Makes the clean target then deletes additional files.
#                    For example, this would delete configuration files or
#                    links that you would normally create as preparation for
#                    compilation, even if the makefile itself cannot create
#                    these files. It may also remove editor backup files
#                    (i.e. *~), core files and any other generated files.
# 
#

#
# =MAKEFILE_LOG=
#
# %PL%
#
# =MAKEFILE_LOG=
#

# Local Variables:
# mode:makefile
# End:
