/**
   File:        %TABLE%Table.hh
   Project:	%PRJ%
   Desc:        
  
    Implementation of the interface to the Mdb %TABLE%
  
   Notes:
  
    Generated by %PERL_PKG% from %TMPL_SRC%
  
   Author:      %AUTHOR%
   Created:     %CREATED%
  
  Revision Info: (See cvs log for revision history)
  
    $Author$
    $Date$
    $Name$
    $Revision$
    $State$

  $Id$
**/


#include "%TABLE%Table.hh"
#include <FileOp.hh>
#include <LibLog.hh>

#if defined( %PRJ_UPCASE%_DEBUG )
#include "%TABLE%Table.ii"
#endif

%PRJ_UPCASE%_VERSION(
  %TABLE%Table,
  "$Id$");

const char	%TABLE%Table::RecFileName[] = "%TABLE%.rbt";

%TABLE%Table::%TABLE%Table(
  const char *	    tableDir,
  %CNSTR_DATASET_ID_ARG%
  ios::open_mode    mode,
  bool		    create,
  unsigned short    permMask
  )
  : dataFileName( tableDir, RecFileName ),
    dataMap( dataFileName,
	     mode,
	     create,
	     Table::getNodeSize(),
	     1,
	     permMask ),
    dataMgr( &dataMap, false ),
    table( &dataMgr, 0, create )
{
  %CNSTR_DATASET_LOGIC%
}


%TABLE%Table::~%TABLE%Table( void )
{
}

%TABLE%Table::size_type
%TABLE%Table::size( void ) const
{
  return( table.size() );
}

%GET_DATASET_ID_IMPL%

bool
%TABLE%Table::good( void ) const
{
  return( table.good() %CHECK_ERROR_NUM%);
}

const char *
%TABLE%Table::error( void ) const
{
  static Str errStr;

  errStr = %TABLE%Table::getClassName();

  if( good() )
    {
       errStr += ": ok";
    }
  else
    {
      size_t eSize = errStr.size();

      if( ! table.good() )
	errStr << ": " << table.error();

      %ERROR_NUM_MSG_IMPL%
      if( eSize == errStr.size() )
        errStr << ": unknown error";
    }

  return( errStr.c_str() );
}

const char *
%TABLE%Table::getClassName( void ) const
{
  return( "%TABLE%Table" );
}

const char *
%TABLE%Table::getVersion( bool withPrjVer ) const
{
  return( version.getVer( withPrjVer ) );
}


ostream &
%TABLE%Table::dumpInfo(
  ostream &	dest,
  const char *	prefix,
  bool		showVer
  ) const
{
  if( showVer )
    dest << %TABLE%Table::getClassName() << ":\n"
	 << %TABLE%Table::getVersion() << '\n';

  if( ! %TABLE%Table::good() )
    dest << prefix << "Error: " << %TABLE%Table::error() << '\n';
  else
    dest << prefix << "Good" << '\n';

  Str pre;
  pre = prefix;
  pre << "table:";
  table.dumpInfo( dest, pre, false );
  
  return( dest );
}

%TABLE_COPY_IMPL%

bool
%TABLE%Table::Remove(
  const FilePath &  tableDir
  )
{
  FilePath  dataFn( tableDir, RecFileName );

  FileStat  dataStat( dataFn );

  if( dataStat.good() )
    {
      FileOp    fileOp;

      if( ! fileOp.remove( dataFn ) )
	{
	  LLgError << fileOp.error() << endl;
	  return( false );
	}
    }

  return( true );
}

bool
%TABLE%Table::Archive(
  const FilePath & tableDir,
  const FilePath & archiveDir
  )
{
  return( Copy( tableDir, archiveDir )
	  && Remove( tableDir ) );
}

ostream &
DumpRec( ostream & dest, const %TABLE%Table::Rec & rec )
{

  // NEW_TABLE - not all of these will be needed.
  %DUMP_FIELDS%
  
  return( dest );
}


// Local Variables:
// mode:c++
// End:

