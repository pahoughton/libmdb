#ifndef _Hash_ii_
#define _Hash_ii_
//
// File:        Hash.ii
// Project:	Mdb
// Desc:        
//
//  	Inline source for Hash
//
// Author:      Paul A. Houghton - (paul.houghton@wcom.com)
// Created:     07/01/97 09:19
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//


template< class Key,
	  class HashFunct,
	  class LessKey >
inline
Hash< Key, HashFunct, LessKey >::Hash(
  MultiMemOffset *	memMgr,
  const char *		indexFileName,
  ios::open_mode	mode,
  bool			create,
  unsigned short	permMask
  )
  : table( memMgr, indexFileName, mode, create, permMask )
{
}

template< class Key,
	  class HashFunct,
	  class LessKey >
inline
Hash< Key, HashFunct, LessKey >::~Hash( void )
{
}
  
template< class Key, class HashFunct, class LessKey >
inline
bool
Hash< Key, HashFunct, LessKey >::good( void ) const
{
  return( table.good() );
}

template< class Key, class HashFunct, class LessKey >
inline
const char *
Hash< Key, HashFunct, LessKey >::error( void ) const
{
  return( table.error() );
}


template< class Key, class HashFunct, class LessKey >
inline
const char *
Hash< Key, HashFunct, LessKey >::getClassName( void ) const
{
  return( "Hash<Key,HashFunct,LessKey>" );
}

template< class Key, class HashFunct, class LessKey >
inline
const char *
Hash< Key, HashFunct, LessKey >::getVersion( bool withPrjVer ) const
{
  return( table.getVersion( withPrjVer ) );
}

template< class Key, class HashFunct, class LessKey >
inline
ostream &
Hash< Key, HashFunct, LessKey >::dumpInfo(
  ostream &	dest,
  const char *	prefix,
  bool		showVer
  ) const
{
  if( showVer )
    dest << Hash::getClassName() << ":\n"
	 << Hash::getVersion() << '\n';

  if( ! Hash::good() )
    dest << prefix << "Error: " << Hash::error() << '\n';
  else
    dest << prefix << "Good" << '\n';

  Str pre;
  pre = prefix;
  pre << "table:";
  table.dumpInfo( dest, pre, false );
  
  return( dest );
}

template< class Key, class HashFunct, class LessKey >
inline
ostream &
Hash< Key, HashFunct, LessKey >::dumpTable( ostream & dest ) const
{
  HashDumpMethods   meth( table, *this );
  
  return( table.dumpTable( dest, meth ) );
}

template< class Key, class HashFunct, class LessKey >
inline
ostream &
Hash< Key, HashFunct, LessKey >::dumpKey(
  ostream &	dest,
  const Key &	CLUE_UNUSED( key )
  ) const
{
  return( dest );
}

template< class Key, class HashFunct, class LessKey >
inline
ostream &
Hash< Key, HashFunct, LessKey >::dumpValue(
  ostream &	dest,
  const Key &	CLUE_UNUSED( value )
  ) const
{
  return( dest );
}




// Revision Log:
// 
// $Log$
// Revision 2.1  1997/07/11 17:37:31  houghton
// Initial Version.
//
//
#endif // ! def _Hash_ii_ 
