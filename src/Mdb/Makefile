#
#
# Title:        Makefile
# Project:	Mdb 
# Desc:
# 
#   Makefile for building the c/c++ library Mdb
# 
# Notes:
#
#   This Makefile was generated by MakeConfigs GenMakefile. It
#   requires MakeConfigs and GNU's make version 3.79 to
#   build its targets.
#
#   See Detail Documentation the end of the file for more information
#
#   Try 'make help' for a list of standard targets.
#
#
# Author:	Paul Houghton <Paul.Houghton@mci.com>
# Created:	7/26/101 using MakeConfigs 6.01.01
#
# Revision History: (See end of file for Revision Log)
#
#   $Author$ 
#   $Date$ 
#   $Name$ 
#   $Revision$ 
#   $State$ 
#
#   $Id$ 

#
# The following variables control the behavior of MakeConfigs.
#   makefile_type   is the type of object being build (do NOT change)
#   make_cfg_ver    is the version of MakeConfigs to use
#   make_target	    is the default target to build
#   show_commands   if this is true, the commands  will be output
#   proto_dep	    if this is true, the proto header will be rebuild when
#		    one of it's dependencies changes (ie a .c source)
#   check_install   if this is true, install and install_all will NOT
#		    overwrite an installed version.
#

makefile_type   = lib
make_cfg_ver	= 6.01
make_target	= default
show_commands 	= # true
proto_dep	= true
check_install	= true
force		= # true

PRJ_TOPDIR	= ../..
config_dir  	= $(PRJ_TOPDIR)/src/config

PROJECT_NAME	= Mdb
NAME		= Mdb

INSTALL_BASE_DIR	= $(TOOL_DIR)
INSTALL_LIB_DIR		= $(INSTALL_BASE_DIR)/lib
INSTALL_INC_DIR		= $(INSTALL_BASE_DIR)/include

include $(PRJ_TOPDIR)/src/config/00-Makefile.cfg
include Make/make.cfg.$(make_cfg_ver)

# 
# =USE_CURRENT_MAKEFILE=
# When you re-gen a make file, every thing between 
# these tags will be kept in the new makefile
# if you want it re-gen'd, just delete the tags
#

VER_MAJOR	= 4
VER_MINOR	= 01
VER_RELEASE	= 01
VERSION		= $(VER_MAJOR).$(VER_MINOR).$(VER_RELEASE)

LIBRARY_DEFAULT	= lib$(NAME)_s.a
LIBRARY_DEBUG	= lib$(NAME)_g.a
LIBRARY_TEST	= lib$(NAME)_tg.a
LIBRARY_PROFILE	= lib$(NAME)_pg.a
LIBRARY_SHARED	= lib$(NAME).$(shlib_ext)

# PROTO_H		= _$(NAME)_Proto.h

# include any arch specific makefile component
include $(PRJ_TOPDIR)/src/arch/$(arch)/Makefile.$(NAME)



VPATH		= $(ARCH_VPATH):.

###### D E F I N E S  #####
#
# Config defines available
#
#


SRC_DEFINES	= 
PRJ_DEFINES	= -DVERSION=\"$(VERSION)\" $(ARCH_DEFINES)

DEFAULT_DEFINES = -DMDB_DEFAULT=1
DEBUG_DEFINES	= -DMDB_DEBUG=1 # -DSTLUTILS_DEBUG=1 
TEST_DEFINES	= -DMDB_TEST=1 $(DEBUG_DEFINES)			\
		  -DMDD_TEST=1 -DMDF_DEBUG=1 -DRBT_TEST=1
PROFILE_DEFINES	= -DMDB_PROFILE=1
SHARED_DEFINES	= -DMDB_SHARED=1

######  I N C L U D E S #####
#
# Config includes available (need to use -I)
#
# $(alpha_incdir) 	$(beta_incdir) 	$(local_incdir)
#


SRC_INC		= $(ARCH_INC) -I. 
PRJ_INC		= $(SUPPORT_INC_DIRS)


# Any other cpp flags to use on for all targets

CPP_FLAGS		= $(ARCH_CPP_FLAGS)

FLEX_FLAGS		=
BISON_FLAGS		=

###### C O M P I L E / C P P #####
#
# Config flags available
#
# $(cc_optimize_flags) $(cxx_optimize_flags)
# $(cc_debug_flags)    $(cxx_debug_flags)
# $(cc_profile_flags)  $(cxx_profile_fllags)
# $(cc_warn)           $(cxx_warn)
#


CC_OTHER		=

CC_FLAGS		= $(cc_warn) $(ARCH_CC_FLAGS) $(CC_OTHER)

DEFAULT_CC_FLAGS	= $(cc_optimize_flags)
DEBUG_CC_FLAGS		= $(cc_debug_flags)
TEST_CC_FLAGS		= $(cc_debug_flags)
PROFILE_CC_FLAGS	= $(cc_profile_flags)
SHARED_CC_FLAGS		= $(cc_shared_flags) $(cc_optimize_flags)

CXX_OTHER		=

CXX_FLAGS		= $(cxx_warn) $(ARCH_CXX_FLAGS) $(CXX_OTHER)

DEFAULT_CXX_FLAGS	= $(cxx_optimize_flags)
DEBUG_CXX_FLAGS		= $(cxx_debug_flags)
TEST_CXX_FLAGS		= $(cxx_debug_flags)
PROFILE_CXX_FLAGS	= $(cxx_profile_flags)
SHARED_CXX_FLAGS	= $(cxx_shared_flags) $(cxx_optimize_flags)

# **** S H A R E D   D E P   L I B S *****

SHDEP_LIBS		= -lc

# **** I N S T A L L ****

INSTALL_LIB_PERM	= 444
INSTALL_INC_PERM	= 444

INSTALL_LIB_FLAGS	= -m $(INSTALL_LIB_PERM)
INSTALL_INC_FLAGS	= -m $(INSTALL_INC_PERM)

# ****H E L P   V A R I A B L E S ****

HELP_CONFIG_VARIABLES	=

HELP_TARGETS		=

# **** P H O N Y   T A R G E T S

PHONY_TARGETS		= $(HELP_TARGETS)

#
# =USE_CURRENT_MAKEFILE=
#

# **** S O U R C E   F I L E S ****

GENERATED_SOURCES	=			

FLEX_C_SOURCES	=			
BISON_C_SOURCES	=			
FLEX_CXX_C_SOURCES	=			
BISON_CXX_C_SOURCES	=			
C_SOURCES	=			\
	$(ARCH_C_SOURCES)               \

CXX_C_SOURCES	=			\
	MapFile.C			\
	MapMem.C			\
	MapMemDynamic.C			\
	MapMemDynamicDynamic.C		\
	MapMemDynamicFixed.C		\
	MultiMemOffset.C		\
	MultiMemOffsetMapDynamic.C	\
	AvlTreeOffsetBase.C		\
	DavlTreeOffsetBase.C		\
	HashTableBase.C			\
	DashTableBase.C			\
	RBTreeBase.C			\
	ReconTableBase.C		\
	$(ARCH_CXX_C_SOURCES)           \

CXX_CC_SOURCES	=			\
	$(ARCH_CXX_CC_SOURCES)          \

CXX_CPP_SOURCES	=			\
	$(ARCH_CXX_CPP_SOURCES)         \


USER_H_INCS	=			\
	$(ARCH_USER_H_INCS)             \

USER_HH_INCS	=			\
	MdbConfig.hh                    \
	MdbVersion.hh                   \
	MdbUtils.hh			\
	MapBatch.hh			\
	MapFile.hh			\
	MapMem.hh			\
	MapMemDlist.hh			\
	MapMemDynamic.hh		\
	MapMemDynamicDynamic.hh		\
	MapMemDynamicFixed.hh		\
	MultiMemOffset.hh		\
	MultiMemOffsetMapDynamic.hh	\
	HashTableBase.hh		\
	HashTable.hh			\
	HashSet.hh			\
	DashTableBase.hh		\
	DashTable.hh			\
	DashSet.hh			\
	DavlTreeOffset.hh		\
	AvlTreeOffset.hh		\
	DavlTreeOffsetBase.hh		\
	AvlTreeOffsetBase.hh		\
	AvlTreeBase.hh			\
	RBTreeBase.hh			\
	RBTree.hh			\
	RBSet.hh			\
	DRBTree.hh			\
	DRBSet.hh			\
	ReconTableBase.hh		\
	ReconTable.hh			\
	$(ARCH_USER_HH_INCS)            \

USER_II_INCS	=			\
	MapBatch.ii			\
	MapFile.ii			\
	MapMem.ii			\
	MapMemDlist.ii			\
	MapMemDynamic.ii		\
	MapMemDynamicDynamic.ii		\
	MapMemDynamicFixed.ii		\
	HashTableBase.ii		\
	HashTable.ii			\
	HashSet.ii			\
	DashTableBase.ii		\
	DashTable.ii			\
	DashSet.ii			\
	AvlTreeOffsetBase.ii		\
	AvlTreeOffset.ii		\
	DavlTreeOffset.ii		\
	DavlTreeOffsetBase.ii		\
	MultiMemOffset.ii		\
	MultiMemOffsetMapDynamic.ii	\
	RBTreeBase.ii			\
	RBTree.ii			\
	RBSet.ii			\
	DRBTree.ii			\
	DRBSet.ii			\
	ReconTableBase.ii		\
	ReconTable.ii			\
	$(ARCH_USER_II_INCS)            \

USER_INCLUDES	=		\
	$(USER_H_INCS)		\
	$(USER_HH_INCS)		\
	$(USER_II_INCS)		\

C_HEADERS	=			\
	exampleTree.h                   \
	$(ARCH_C_HEADERS)               \

CXX_HEADERS	=			\
	AvlTree.hh                      \
	AvlTreeAddrBase.hh              \
	AvlTreeBase.hh                  \
	AvlTreeOffset.hh                \
	AvlTreeOffsetBase.hh            \
	DRBSet.hh                       \
	DRBTree.hh                      \
	DashSet.hh                      \
	DashTable.hh                    \
	DashTableBase.hh                \
	DavlTreeOffset.hh               \
	DavlTreeOffsetBase.hh           \
	HashSet.hh                      \
	HashTable.hh                    \
	HashTableBase.hh                \
	MapBatch.hh                     \
	MapFile.hh                      \
	MapMem.hh                       \
	MapMemDlist.hh                  \
	MapMemDynamic.hh                \
	MapMemDynamicDynamic.hh         \
	MapMemDynamicFixed.hh           \
	MdbConfig.hh                    \
	MdbUtils.hh                     \
	MdbVersion.hh                   \
	MultiMem.hh                     \
	MultiMemOffset.hh               \
	MultiMemOffsetMapDynamic.hh     \
	MultiMemOffsetMapFixed.hh       \
	RBSet.hh                        \
	RBTree.hh                       \
	RBTreeBase.hh                   \
	ReconTable.hh                   \
	ReconTableBase.hh               \
	$(ARCH_CXX_HEADERS)             \

CXX_INLINES	=			\
	AvlTreeOffset.ii                \
	AvlTreeOffsetBase.ii            \
	DRBSet.ii                       \
	DRBTree.ii                      \
	DashSet.ii                      \
	DashTable.ii                    \
	DashTableBase.ii                \
	DavlTreeOffset.ii               \
	DavlTreeOffsetBase.ii           \
	HashSet.ii                      \
	HashTable.ii                    \
	HashTableBase.ii                \
	MapBatch.ii                     \
	MapFile.ii                      \
	MapMem.ii                       \
	MapMemDlist.ii                  \
	MapMemDynamic.ii                \
	MapMemDynamicDynamic.ii         \
	MapMemDynamicFixed.ii           \
	MultiMemOffset.ii               \
	MultiMemOffsetMapDynamic.ii     \
	MultiMemOffsetMapFixed.ii       \
	RBSet.ii                        \
	RBTree.ii                       \
	RBTreeBase.ii                   \
	ReconTable.ii                   \
	ReconTableBase.ii               \
	$(ARCH_CXX_INLINES)             \



###### T A R G E T S #####
#
# Build the `help' or `targets' target for a list of
# available top-level targets and what they do.
#



include Make/make.cfg.targets.$(makefile_type).$(make_cfg_ver)


default debug test profile shared:: $(generated_files)

default:: $(LIBRARY_$($(make_target)))

debug test profile shared:: 
	$(hide) $(MAKE) make_target=$@ $(LIBRARY_$($@))

all::	default debug test profile shared


install:: install_lib_check install_$(make_target)
	$(hide) echo + Installation Complete!

install_all:: install_lib_check

install_all:: install_default install_debug install_profile install_shared
	$(hide) echo + Installation Complete!

install_default:: default $(INSTALL_LIB_DIR)/$(LIBRARY_DEFAULT)
install_debug::   debug   $(INSTALL_LIB_DIR)/$(LIBRARY_DEBUG)
install_test::    test    $(INSTALL_LIB_DIR)/$(LIBRARY_TEST)
install_profile:: profile $(INSTALL_LIB_DIR)/$(LIBRARY_PROFILE)
install_shared::  shared  $(INSTALL_LIB_DIR)/$(LIBRARY_SHARED)
	$(hide) chmod +x $(INSTALL_LIB_DIR)/$(LIBRARY_SHARED)


# include dependencies generated by 'make depend'
-include .depend_$(make_target)


#
# Detail Documentation
#
# General Information
#
#	Do not be daunted by the number of variables and targets. The
#	MakeConfigs system has a tremendous amount of functionality
#	built into it. All you really need to do is list your sources
#	in the appropriate section and build the targets (debug,
#	default, profile & shared). But, if you have to perform actions
#	that are beyond the default targets, these targets and
#	variables are available for your use.
#
#	You should probably start by building the `depend' target so
#	that all of the dependencies will be generated for you. What
#	this does is scan the source modules for include files and the
#	creates a dependency so if the include file changes the object
#	will be recompiled from the source.
#
#	One of the features of MakeConfigs is that you can build all
#	the various version (default, debug, profiled, shared) of the
#	target without having to clean up the objects between
#	them. This is because the object files are kept in different
#	directories under the 'objects' directory.
#
# Control Variables
#
#   show_commands   if this is true, the commands  will be output
#
#   make_target	    is the default target to build
#
#   proto_dep	    if this is true, the proto header will be rebuild when
#
#   check_install   if this is true, install and install_all will NOT
#		    overwrite an installed version.
#
#   force	    If this is not empty, force the rebuild of all
#		    targets even if none of the dependencies are out
#		    of date.
#
#
# Target Variables
#
#   NAME	    The name of the library to build not
#		    (i.e. NAME=Cool the default lib will be libCool.a)
#
#   PRJ_TOPDIR	    This is the project's top directory (i.e. all
#		    the projects files are within subdirectories
#		    under this directory). The Generated Makefile
#		    contains a PRJ_TOPDIR variable the points to
#		    this directory by determining how many
#		    directory levels up the current directory is
#		    from the `topdir' and using that number of
#		    `..' sets. Fore example, if the `topdir' is
#		    /prj/libCool and the current directory is
#		    /prj/libCool/src/Cool, the PRJ_TOPDIR would be
#		    set to `../..' (i.e this directory is 2
#		    levels down from the `topdir'.
#
#   VER_MAJOR		Major version number (i.e. the 1 in 1.2.3).
#
#   VER_MINOR		Minor version number (i.e. the 2 in 1.2.3).
#
#   VER_RELEASE		Release number (i.e. the 3 in 1.2.3).
#
#   LIBRARY_DEFAULT	The library name to create when building the
#			default target.
#
#   LIBRARY_DEBUG	The library name to create when building the
#			debug target.
#
#   LIBRARY_TEST	The library name to create when building the
#			test target.
#
#   LIBRARY_PROFILE	The library name to create when building the
#			profile target.
#
#   LIBRARY_SHARED	The library name to create when building the
#			shared target.
#
# Install Variables
#
#   INSTALL_BASE_DIR	Base directory to install the include files
#			and the libraries.
#
#   INSTALL_INC_DIR	Directory to install include files. The
#			default is $(INSTALL_BASE_DIR)/include
#
#   INSTALL_LIB_DIR	Directory to install library files. The
#			default is $(INSTALL_BASE_DIR)/lib
#
#   INSTALL_LIB_PERM	The permissions to pass the install command
#			when installing the library
#
#   INSTALL_INC_PERM	The permissions to pass the install command
#			when installing include/header files.
#
#   INSTALL_LIB_FLAGS	The command line arguments to pass the install
#			command when installing a library.
#
#   INSTALL_INC_FLAGS	The command line arguments to pass the install
#			command when installing include/header files.
#
# Preprocessor Variables
#
#   SRC_DEFINES	    These are defines that apply only to the compiles in
#		    this directory.
#
#   PRJ_DEFINES	    These are defines that would be passed on to
#		    compiles in other subdirectories.
#
#   DEFAULT_DEFINES These are only used when building the default
#		    optimized static library.
#
#   DEGUG_DEFINES   These are only used when building the debug
#		    version of the library.  
#
#   TEST_DEFINES    These are only used when building the test version
#		    of the library.
#
#   PROFILE_DEFINES These are only used when building the profile
#		    version of the library.
#
#   SHARED_DEFINES  These are only used when building the shared
#		    version of the library.
#
#   SRC_INC	    The include directives that only apply to compiles
#		    in this directory.
#
#   PRJ_INC	    The include directives that would be passed on to
#		    compiles in other subdirectories.
#
#   CPP_FLAGS	    Other flags to pass the preprocessor (cpp).
#
# C Language Compile Constants
#
#   cc_warn		set by the platform specific configuration
#			file to generate compile time warning messages.
#
#   cc_optimize_flags	set by the platform specific configuration
#			file to generate object files that have been
#			highly optimized for speed.
#
#   cc_debug_flags	set by the platform specific configuration
#			file to generate object files that include the
#			largest amount of debugging information
#			available.
#
#   cc_profile_flags	set by the platform specific configuration
#			file to include profiling information for
#			performance testing.
#
#   cc_shared_flags	set by the platform specific configuration
#			file to generate dynamically loadable object
#			files.
#
# C Language Compile Variables
#
#   CC_OTHER		normally this is left un-set so additional flags
#			can be passed to the compiler from the make
#			command (i.e. make debug CC_OTHER=-H).
#
#   CC_FLAGS		These are flags to pass the C compiler along
#			with the target specific flags.
#
#   DEFAULT_CC_FLAGS	The set of flags to pass the C compiler only
#			when building default target objects.
#			
#   DEBUG_CC_FLAGS	The set of flags to pass the C compiler only
#			when building debug target objects.
#			
#   TEST_CC_FLAGS	The set of flags to pass the C compiler only
#			when building test target objects.
#			
#   PROFILE_CC_FLAGS	The set of flags to pass the C compiler only
#			when building profile target objects.
#			
#   SHARED_CC_FLAGS	The set of flags to pass the C compiler only
#			when building shared target objects.
#
# C++ Language Compile Constants
#
#   cxx_warn		set by the platform specific configuration
#			file to generate compile time warning messages.
#
#   cxx_optimize_flags	set by the platform specific configuration
#			file to generate object files that have been
#			highly optimized for speed.
#
#   cxx_debug_flags	set by the platform specific configuration
#			file to generate object files that include the
#			largest amount of debugging information
#			available.
#
#   cxx_profile_flags	set by the platform specific configuration
#			file to include profiling information for
#			performance testing.
#
#   cxx_shared_flags	set by the platform specific configuration
#			file to generate dynamically loadable object
#			files.
#
# C++ Language Compile Variables
#
#   CXX_OTHER		normally this is left un-set so additional flags
#			can be passed to the compiler from the make
#			command (i.e. make debug CXX_OTHER=-H) 
#
#   CXX_FLAGS		These are flags to pass the C++ compiler along
#			with the target specific flags. 
#
#   DEFAULT_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building default target objects.
#			
#   DEBUG_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building debug target objects.
#			
#   TEST_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building test target objects.
#			
#   PROFILE_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building profile target objects.
#			
#   SHARED_CXX_FLAGS	The set of flags to pass the C++ compiler only
#			when building shared target objects.
#
#   PROTO_H		The name of the file to contain the function
#			prototypes for C sources.
#
# Library Creation Variables
#
#   SHDEP_LIBS		On some platforms, you will need to list the
#			libraries that contain functions called by
#			your library when building a shared library.
#
# Source Variables
#
#   C_SOURCES		C .c sources to compile.
#
#   CXX_C_SOURCES	C++ .C sources to compile.
#
#   CXX_CC_SOURCES	C++ .cc sources to compile.
#
#   CXX_CPP_SOURCES	C++ .cpp sources to compile.
#
#   BISON_C_SOURCES	bison .y files to compile into .c sources.
#
#   FLEX_C_SOURCES	flex .l files to compile into .c sources.
#
#   BISON_CXX_C_SOURCES	bison .y files to compile into c++ .C sources.
#
#   FLEX_CXX_C_SOURCES	flex .l files to compile into c++ .C sources.
#
#   C_HEADERS		All C header files (.h)
#
#   CXX_HEADERS		All C++ header files (.hh)
#
#   CXX_INLINES		All C++ inline function files (.ii)
#
#   USER_H_INCS		The C header files to install.
#
#   USER_HH_INCS	The C++ header files to install.
#
#   USER_II_INCS	The C++ incline function files to install.
#
#   USER_INCLUDES	include files (.h, .hh, .ii) to install.
#
# Targets
#
#   depend:          Generate the dependency file for the default target.
# 
#   depend_debug:    Generate the dependency file for the debug target.
# 
#   depend_default:  Generate the dependency file for the default target.
# 
#   depend_test:     Generate the dependency file for the test target.
# 
#   depend_profile:  Generate the dependency file for the profile target.
# 
#   depend_shared:   Generate the dependency file for the shared target.
# 
#   depend_all:      Generate all the dependency files for all the targets.
# 
#   debug:           Make a debug version of the top-level target.
# 
#   test:            Make a version of the top-level target for testing.
# 
#   profile:         Make a version of the top-level target that has profile
#                    information to help resolve performance problems
# 
#   shared:          Make a version of the top-level target that uses shared
#                    libraries or is a shared library.
# 
#   install_test:    Install the test version of the top-level target.
# 
#   install_debug:   Install the debug version of the top-level target.
# 
#   install_default: Copy the default top-level target file into a directory
#                    the users typically search for it; copy any auxiliary
#                    files that the target uses into the directories where it
#                    will look for them.
# 
#   install_profile: Install the profile version of the top-level target.
# 
#   install_shared:  Install the shared version of the top-level target.
# 
#   all:             Make all the top-level targets the makefile knows about.
# 
#   default:         Make the default top-level target.
# 
#   check:           Perform self tests on the program or target this
#                    makefile builds
# 
#   install:         Copy the default top-level target file into a directory
#                    the users typically search for it; copy any auxiliary
#                    files that the target uses into the directories where it
#                    will look for them.
# 
#   install_all:     Copy the all the top-level target files into directories
#                    that users typically search for them; copy any auxiliary
#                    files that the target files use into the directories
#                    where they will look for them.
# 
#   clean:           Delete all files that are normally created by running
#                    make.
# 
#   realclean:       Makes the clean target then deletes additional files.
#                    For example, this would delete configuration files or
#                    links that you would normally create as preparation for
#                    compilation, even if the makefile itself cannot create
#                    these files. It may also remove editor backup files
#                    (i.e. *~), core files and any other generated files.
# 
#



#
# =MAKEFILE_LOG=
#
# %PL%
#
# $Log$
# Revision 4.3  2003/08/09 12:43:23  houghton
# Changed ver strings.
#
# Revision 4.2  2001/07/30 21:49:08  houghton
# *** empty log message ***
#
# Revision 4.1  2001/07/27 00:57:43  houghton
# Change Major Version to 4
#
# Revision 2.23  2001/07/27 00:47:31  houghton
# *** empty log message ***
#
# Revision 2.22  2000/08/02 11:03:13  houghton
# Added ReconTable sources.
#
# Revision 2.21  2000/05/26 11:44:53  houghton
# Bug-Fix: was not including make config file.
#
# Revision 2.20  1999/05/09 17:31:53  houghton
# Fixed install dirs.
#
# Revision 2.19  1998/10/23 13:18:59  houghton
# Changed to use MakeConfigs 5.06.
#
# Revision 2.18  1998/03/23 10:41:59  houghton
# Changed to work with MakeConfigs 5.05.
#
# Revision 2.17  1998/02/02 15:38:30  houghton
# Changed to use MakeConfigs 5.04.
#
# Revision 2.16  1997/12/19 14:37:58  houghton
# Added cc_default cxx_default.
#
# Revision 2.15  1997/09/17 16:55:59  houghton
# Changed for new library rename to StlUtils
#
# Revision 2.14  1997/09/02 13:24:35  houghton
# Changed Version number.
#
# Revision 2.13  1997/08/25 10:36:00  houghton
# Commented out RBT_TEST define.
#
# Revision 2.12  1997/08/18 10:25:18  houghton
# Changed to use MakeConfigs 5.02.
#
# Revision 2.11  1997/08/10 20:36:49  houghton
# Added MapBatch.hh & MapBatch.ii.
#
# Revision 2.10  1997/07/25 15:59:13  houghton
# Added DRBSet.hh, DRBSet.ii, DRBTree.hh and DRBTree.ii.
#
# Revision 2.9  1997/07/25 13:45:52  houghton
# Chagned: Dash was renamed to DashSet.
# Changed: Hash was renamed to HashSet.
#
# Revision 2.8  1997/07/21 10:50:13  houghton
# Added dependant libs to SHLIB_DEP_LIB.
#
# Revision 2.7  1997/07/16 19:21:18  houghton
# Added DavlTreeOffsetBase.ii.
#
# Revision 2.6  1997/07/13 11:14:33  houghton
# Cleanup
# Removed ChunkMgr.
#
# Revision 2.5  1997/06/27 12:14:47  houghton
# Added MDD_DEBUG flag.
#
# Revision 2.4  1997/06/19 12:01:38  houghton
# Changed MapMemFixedDynamic to MapMemDynamicFixed.
#
# Revision 2.3  1997/06/18 14:14:21  houghton
# Added MultiMem classes and MapMemFixedDynamic.
#
# Revision 2.2  1997/06/05 13:44:02  houghton
# Fixed up install values.
#
# Revision 2.1  1997/06/05 11:29:11  houghton
# Initial Version.
#
# =MAKEFILE_LOG=
#

# Local Variables:
# mode:makefile
# End:

