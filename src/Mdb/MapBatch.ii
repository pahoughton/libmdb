#ifndef _MapBatch_ii_
#define _MapBatch_ii_
//
// File:        MapBatch.ii
// Project:	Mdb
// Desc:        
//
//  	Inline source for MapBatch
//
// Author:      Paul Houghton - (paul.houghton@wcom.com)
// Created:     08/10/97 13:50
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//


template< class T >
inline
MapBatch<T>::MapBatch(
  const char *	    fileName,
  ios::open_mode    mode,
  bool		    create,
  MapFile::MapMask  permMask
  )
  : map( fileName, 0, mode, create, permMask ),
    endPos( create ? 0 : map.getSize() )
{
}

template< class T >
inline
MapBatch<T>::~MapBatch( void )
{
  if( (map.getMode() & ios::out ) )
    {
      map.unmap();
      
      truncate( map.getFileName(), endPos );
    }
}

template< class T >
inline
bool
MapBatch<T>::good( void ) const
{
  return( map.good() );
}

template< class T >
inline
const char * 
MapBatch<T>::error( void ) const
{
  return( map.error() );
}

template< class T >
inline
const char *
MapBatch<T>::getClassName( void ) const
{
  return( "MapBatch<T>" );
}

template< class T >
inline
ostream &
MapBatch<T>::dumpInfo(
  ostream &	dest,
  const char *	prefix,
  bool		showVer
  ) const
{
  
  if( showVer )
    dest << MapBatch<T>::getClassName() << ":\n"
      ;

  if( ! MapBatch<T>::good() )
    dest << prefix << "Error: " << MapBatch<T>::error() << '\n';
  else
    dest << prefix << "Good" << '\n';

  Str pre;
  pre = prefix;
  pre << "map:";
  map.dumpInfo( dest, pre, false );

  dest << prefix << "endpos:     " << endPos << '\n'
    ;
  
  return( dest );
}

template< class T >
inline
DumpInfo< MapBatch<T> >
MapBatch<T>::dump( const char * prefix, bool showVer ) const
{
  return( DumpInfo< MapBatch<T> >( *this, prefix, showVer ) );
}

// Revision Log:
// 
// $Log$
// Revision 2.5  1997/12/23 12:10:45  houghton
// Bug-Fix: was not truncating file if batch was empty.
//
// Revision 2.4  1997/09/02 13:26:03  houghton
// Bug-Fix: endpos had the address which could change due to an
//     append(). Changed so endpos is an offset and added to getBase() which
//     allways has the correct base address.
//
// Revision 2.3  1997/08/20 10:36:22  houghton
// Port(AIX): changed dumpInfo class specifiers from MapBatch:: to
//     MapBatch<T>::
//
// Revision 2.2  1997/08/17 01:38:57  houghton
// Bug-Fix: MapMask is part of MapFile
// Bug-Fix: dump is a 'const' method.
//
// Revision 2.1  1997/08/10 20:33:01  houghton
// Initial Version.
//
//
#endif // ! def _MapBatch_ii_ 
