#ifndef _MapMemDynamicDynamic_ii_
#define _MapMemDynamicDynamic_ii_
//
// File:        MapMemDynamicDynamic.ii
// Project:	Mdb
// Desc:        
//
//  	Inline source for MapMemDynamicDynamic
//
// Author:      Paul A. Houghton - (paul.houghton@wcom.com)
// Created:     03/07/97 06:13
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//


#if defined( MDB_DEBUG )
#define inline
#endif

inline
unsigned long
MapMemDynamicDynamic::getChunkSize( void ) const
{
  return( mapInfo() ? mapInfo()->chunkSize : 0 );
}

inline
unsigned long
MapMemDynamicDynamic::getFreeSize( void ) const
{
  return( mapInfo() ? mapInfo()->freeSize : 0 );
}

inline
MapMemDynamicDynamic::FreeList *
MapMemDynamicDynamic::getFreeNode( off_t f )
{
  return( (FreeList *)(getBase() + f ) );
}

inline
const MapMemDynamicDynamic::FreeList *
MapMemDynamicDynamic::getFreeNode( off_t f ) const
{
  return( (const FreeList *)(getBase() + f ) );
}

inline
bool
MapMemDynamicDynamic::setPrevFnodeNext( off_t f, off_t n )
{
  off_t prev = getFreeNode( f )->prev;

  if( prev )
    getFreeNode( prev )->next = n;
  else
    mapInfo()->freeList.next = n;
  
  return( true );
}

inline
bool
MapMemDynamicDynamic::setNextFnodePrev( off_t f, off_t p )
{
  off_t next = getFreeNode( f )->next;

  if( next )
    getFreeNode( next )->prev = p;
  else
    mapInfo()->freeList.prev = p;
  
  return( true );
}

inline
MapMemDynamicDynamic::size_type &
MapMemDynamicDynamic::setNodeSize( off_t node, size_type nodeSize )
{
  *( (size_type *)(getBase() + node )) = nodeSize;
  return( getNodeSize( node ) );
}

inline
MapMemDynamicDynamic::size_type &
MapMemDynamicDynamic::getNodeSize( off_t node )
{
  return( *( (size_type *)(getBase() + node )) );
}

inline
MapMemDynamicDynamic::size_type 
MapMemDynamicDynamic::getNodeSize( off_t node ) const
{
  return( *( (size_type *)(getBase() + node )) );
}

inline
DumpInfo< MapMemDynamicDynamic >
MapMemDynamicDynamic::dump( const char * prefix, bool showVer ) const
{
  return( DumpInfo<MapMemDynamicDynamic>( *this, prefix, showVer ) );
}


inline
MapMemDynamicDynamic::MapDynamicDynamicInfo *
MapMemDynamicDynamic::mapInfo( void )
{
  return( (MapDynamicDynamicInfo *)getBase() );
}

inline
const MapMemDynamicDynamic::MapDynamicDynamicInfo *
MapMemDynamicDynamic::mapInfo( void ) const
{
  return( (const MapDynamicDynamicInfo *)getBase() );
}


#if defined( inline )
#undef inline
#endif

// Revision Log:
// 
// $Log$
// Revision 2.4  1997/06/05 11:28:25  houghton
// Cleanup.
// Change to be part of libMdb (vs Clue1).
// Changed to use new MapFile types.
// Removed addRef, getRefCount & delRef methods (now in base class).
//
// Revision 2.3  1997/03/18 16:57:00  houghton
// Added setNodeSize().
//
// Revision 2.2  1997/03/13 02:38:58  houghton
// Added addRef, getRefCount and delRef.
//
// Revision 2.1  1997/03/08 10:29:53  houghton
// Initial partially tested version.
//
//
#endif // ! def _MapMemDynamicDynamic_ii_ 
