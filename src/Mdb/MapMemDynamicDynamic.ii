#ifndef _MapMemDynamicDynamic_ii_
#define _MapMemDynamicDynamic_ii_
//
// File:        MapMemDynamicDynamic.ii
// Project:	Mdb
// Desc:        
//
//  	Inline source for MapMemDynamicDynamic
//
// Author:      Paul A. Houghton - (paul.houghton@wcom.com)
// Created:     03/07/97 06:13
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//


#if defined( MDB_DEBUG )
#define inline
#endif

inline
MapMemDynamicDynamic::FreeNode &
MapMemDynamicDynamic::freeNode( Loc f )
{
  return( *( (FreeNode *)(getBase() + f)) );
}

inline
const MapMemDynamicDynamic::FreeNode &
MapMemDynamicDynamic::freeNode( Loc f ) const
{
  return( *( (const FreeNode *)(getBase() + f)) );
}

inline
MapMemDynamicDynamic::size_type
MapMemDynamicDynamic::freeNodeSize( Loc f ) const
{
  return( freeNode( f ).next ?
	  abs( freeNode( f ).next ) - f :
	  getMapSize() - f );
}

inline
MapMemDynamicDynamic::FreeNode &
MapMemDynamicDynamic::freeList( void )
{
  return( mapInfo()->freeList );
}

inline
const MapMemDynamicDynamic::FreeNode &
MapMemDynamicDynamic::freeList( void ) const
{
  return( mapInfo()->freeList );
}

inline
void
MapMemDynamicDynamic::setNextPrev( Loc f, Loc p )
{
  Loc next = freeNode( f ).next;

  if( next )
    freeNode( next ).prev = p;
  else
    freeList().prev = abs( p );
}

inline
void
MapMemDynamicDynamic::setFreePrevNext( Loc f, Loc n )
{
  Loc prev = freeNode( f ).prevFree;

  if( prev )
    freeNode( prev ).nextFree = n ;
  else
    freeList().nextFree = n;
}

inline
void
MapMemDynamicDynamic::setFreeNextPrev( Loc f, Loc p )
{
  Loc next = freeNode( f ).nextFree;

  if( next )
    freeNode( next ).prevFree = p;
  else
    freeList().prevFree = p;
}

inline
MapMemDynamicDynamic::Loc
MapMemDynamicDynamic::nodeLoc( Loc f ) const
{
  return( f + sizeof( Node ) );
}

inline
MapMemDynamicDynamic::Loc
MapMemDynamicDynamic::freeLoc( Loc n ) const
{
  return( n - sizeof( Node ) );
}

inline
DumpInfo< MapMemDynamicDynamic >
MapMemDynamicDynamic::dump( const char * prefix, bool showVer ) const
{
  return( DumpInfo<MapMemDynamicDynamic>( *this, prefix, showVer ) );
}


inline
MapMemDynamicDynamic::MapDynamicDynamicInfo *
MapMemDynamicDynamic::mapInfo( void )
{
  return( (MapDynamicDynamicInfo *)getBase() );
}

inline
const MapMemDynamicDynamic::MapDynamicDynamicInfo *
MapMemDynamicDynamic::mapInfo( void ) const
{
  return( (const MapDynamicDynamicInfo *)getBase() );
}


#if defined( inline )
#undef inline
#endif

// Revision Log:
// 
// $Log$
// Revision 2.7  1997/09/17 16:56:06  houghton
// Changed for new library rename to StlUtils
//
// Revision 2.6  1997/07/13 11:24:05  houghton
// Removed getFreeSize & getChunkSize (now in .C).
//
// Revision 2.5  1997/06/27 12:15:31  houghton
// Major rework to speed up 'release'.
//
// Revision 2.4  1997/06/05 11:28:25  houghton
// Cleanup.
// Change to be part of libMdb (vs StlUtils1).
// Changed to use new MapFile types.
// Removed addRef, getRefCount & delRef methods (now in base class).
//
// Revision 2.3  1997/03/18 16:57:00  houghton
// Added setNodeSize().
//
// Revision 2.2  1997/03/13 02:38:58  houghton
// Added addRef, getRefCount and delRef.
//
// Revision 2.1  1997/03/08 10:29:53  houghton
// Initial partially tested version.
//
//
#endif // ! def _MapMemDynamicDynamic_ii_ 
