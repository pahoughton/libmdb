#ifndef _RBTree_ii_
#define _RBTree_ii_
//
// File:        RBTree.ii
// Project:	Mdb
// Desc:        
//
//  	Inline source for RBTree
//
// Author:      Paul A. Houghton - (paul.houghton@wcom.com)
// Created:     05/09/97 04:07
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//

template< class Key, class Value, class KeyOfValue, class LessKey >
inline
RBTree< Key, Value, KeyOfValue, LessKey >::RBTree(
  MultiMemOffset *  memMgr,
  unsigned short    treeKey,
  bool		    create
  )
  : RBTreeBase( memMgr, treeKey, create )
{
}

template< class Key, class Value, class KeyOfValue, class LessKey >
inline
RBTree< Key, Value, KeyOfValue, LessKey >::~RBTree( void )
{
}

template< class Key, class Value, class KeyOfValue, class LessKey >
inline
RBTreeBase::size_type
RBTree< Key, Value, KeyOfValue, LessKey >::getNodeSize( void )
{
  return( max( sizeof( RBNode ), sizeof( RBTreeHeader ) ) );
}

template< class Key, class Value, class KeyOfValue, class LessKey >
inline
const Value &
RBTree< Key, Value, KeyOfValue, LessKey >::value( RBTreeBase::Loc node ) const
{
  return( ((const RBNode *)(mgr->address( node )))->value );
}

template< class Key, class Value, class KeyOfValue, class LessKey >
inline
Value &
RBTree< Key, Value, KeyOfValue, LessKey >::value(  RBTreeBase::Loc node )
{
  return( ((RBNode *)(mgr->address( node )))->value );
}

  
template< class Key, class Value, class KeyOfValue, class LessKey >
inline
ostream &
RBTree< Key, Value, KeyOfValue, LessKey >::dumpTree( ostream & dest ) const
{
  DumpTreeMethods meth( this );
  
  return( dumpRBTree( dest, meth ) );
}



// Revision Log:
// 
// $Log$
// Revision 2.3  2000/05/27 14:02:49  houghton
// Port: Sun CC 5.0.
//
// Revision 2.2  1997/07/13 11:31:38  houghton
// Cleanup.
// Major rework.
//
// Revision 2.1  1997/06/05 11:29:13  houghton
// Initial Version.
//
//
#endif // ! def _RBTree_ii_ 
