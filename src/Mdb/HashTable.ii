#ifndef _HashTable_ii_
#define _HashTable_ii_
//
// File:        HashTable.ii
// Project:	Mdb
// Desc:        
//
//  	Inline source for HashTable
//
// Author:      Paul A. Houghton - (paul.houghton@mci.com)
// Created:     05/19/97 06:41
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//




template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::HashTable(
  MultiMemOffset *  memMgr,
  const char *	    indexFileName,
  ios::open_mode    mode,
  bool		    create,
  unsigned short    permMask
  )
  : HashTableBase( memMgr, indexFileName, mode, create, permMask )
{
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
HashTableBase::size_type
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::getNodeSize( void )
{
  return( sizeof( HashNode ) );
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
const Value &
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::value(
  HashTableBase::Loc node
  ) const
{
  return( ((const HashNode *)(mgr->address( node )))->value );
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
Value &
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::value(
  HashTableBase::Loc node
  )
{
  return( ((HashNode *)(mgr->address( node )))->value );
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
bool
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::good( void ) const
{
  return( HashTableBase::good() );
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
const char *
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::error( void ) const
{
  return( HashTableBase::error() );
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
const char *
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::getClassName(
  void
  ) const
{
  return( "HashTable<Key,Value,KeyOfValue,HashFunct,LessKey>" );
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
const char *
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::getVersion(
  bool withPrjVer
  ) const
{
  return( HashTableBase::getVersion( withPrjVer ) );
}

template< class Key,
          class Value,
          class KeyOfValue,
          class HashFunct,
          class LessKey >
inline
ostream &
HashTable< Key, Value, KeyOfValue, HashFunct, LessKey >::dumpInfo(
  ostream &	dest,
  const char *	prefix,
  bool		showVer
  ) const
{
  if( showVer )
    dest << HashTable<Key,Value,KeyOfValue,HashFunct,LessKey>::getClassName()
	 << ":\n"
	 << HashTable<Key,Value,KeyOfValue,HashFunct,LessKey>::getVersion()
	 << '\n';

  if( ! HashTable<Key,Value,KeyOfValue,HashFunct,LessKey>::good() )
    dest << prefix << "Error: "
	 << HashTable<Key,Value,KeyOfValue,HashFunct,LessKey>::error() << '\n';
  else
    dest << prefix << "Good" << '\n';

  Str pre;
  pre = prefix;
  pre << HashTableBase::getClassName() << "::";

  HashTableBase::dumpInfo( dest, pre, false );
    
  return( dest );
}
 
  

  
#if 0
template< class T >
inline
HashTableBase::Loc
HashTable<T>::insert( HashTableBase::Key key, const T & rec )
{
  Loc recLoc = mgr->allocate( sizeof( T ) );

  if( recLoc == ChunkMgr::badLoc )
    return( recLoc );

  *((T *)(mgr->address( recLoc ))) = rec;

  return( HashTableBase::insert( key, recLoc ) );
}

template< class T >
inline
bool
HashTable<T>::erase( HashTableBase::Key key )
{
  return( HashTableBase::erase( key ) );
}

template< class T >
inline
HashTableBase::Loc
HashTable<T>::find( HashTableBase::Key key ) const
{
  return( HashTableBase::find( key ) );
}

template< class T >
inline
const T & 
HashTable<T>::get( HashTableBase::Key key ) const
{
  Loc recLoc = find( key );

  if( recLoc != ChunkMgr::badLoc )    
    return( getRec( recLoc ) );
  else
    return( noRec );
}

template< class T >
inline
T & 
HashTable<T>::get( HashTableBase::Key key )
{
  Loc recLoc = find( key );

  if( recLoc != ChunkMgr::badLoc )    
    return( getRec( recLoc ) );
  else
    return( noRec );
}

template< class T >
inline
DumpInfo< HashTable<T> >
HashTable<T>::dump( const char * prefix, bool showVer ) const
{
  return( DumpInfo< HashTable<T> >( *this, prefix, showVer ) );
}

template< class T >
inline
const T &
HashTable<T>::getRec( HashTableBase::Loc loc ) const
{
  return( *((const T *)mgr->address( loc ) ) );
}

template< class T >
inline
T &
HashTable<T>::getRec( HashTableBase::Loc loc )
{
  return( *((T *)mgr->address( loc ) ) );
}

#endif

// Revision Log:
// 
// $Log$
// Revision 4.2  2003/08/09 12:43:23  houghton
// Changed ver strings.
//
// Revision 4.1  2001/07/27 00:57:43  houghton
// Change Major Version to 4
//
// Revision 2.2  1997/07/13 11:12:31  houghton
// Changed to use MultiMemOffset.
// Added getNodeSize().
//
// Revision 2.1  1997/06/05 11:29:10  houghton
// Initial Version.
//
//
#endif // ! def _HashTable_ii_ 
