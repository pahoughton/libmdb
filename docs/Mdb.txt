#
#
# Title:        Mdb.txt
# Project:	libMdb
# Desc:
# 
#   
# 
# Notes:
# 
# Author:	Paul Houghton - (paul.houghton@wcom.com)
# Created:	08/09/97 16:09
#
# Revision History: (See end of file for Revision Log)
#
#   Last Mod By:    $Author$
#   Last Mod:	    $Date$
#   Version:	    $Revision$
#
#   $Id$
# 

Memory Database Library

Overview

    The Memory Database Library is a collection of C++ classes that
    provide high performance access to large data sets. On a 4
    processor IBM RS/6000 the HashSet class averaged over 680,000
    finds per second against a 1,000,000 record table.

    The library can be used by any Unix based applications that need
    high performance access to data. The classes were developed using
    (draft) ANSI Standard C++ and Unix's mapped memory system
    calls. It was designed to be portable to any of the major Unix
    operating systems (i.e. IBM AIX, SunOS, HP-UX).

    All of the container (i.e. table) classes utilize the exact same
    interface as the STL (Standard Template Library) container
    classes. This should significantly reduce the learning curve for
    our C++ developers. The only significant difference between the
    STL and libMdb's container classes is that these classes use
    mapped memory for data storage and access.

Functionallity (what does it do)

    Persistant Data Storage.

	The data tables created by the library are stored as disk
	files. This provides persistance across application execution
	and system restarts.
	
    Multi Application Read Access.

	Any number of applications running on the same system can have
	simotanious read access to the data tables.

Technology (how does it do it)

    Mapped Memory

	Mapped Memory is a techology provided by Unix that mirrors
	the contents of a file in real memory. The operating system
	keeps the file and memory in sync. This techology provides a
	significant performance improvement over reading and/or
	writing a file.

	Multiple applications accessing the same table use the same
	real memory.

	(insert picture here).

    Hash Table

    	A Hash table uses a primary key value as a direct index to a
    	data record. The key is converted to a uniq number called the
    	hash value. This value is then used like an index into an
    	array.

	(insert picture here)

	As an example, this techique is used for trunk data in the new
	Traffic Lookup process. The switch number is a 3 digit numeric
	value and the trunk group is a 4 digit numeric value. The hash
	value is created by the formula:

	    hash = (switch * 10000) + trunk
	
    Balanced Binary Tree

	A balanced binary tree is an ordered tree where both sides are
	kept in balance. When searching the tree, the primary key is
	compared first to the root value. If it is greater, the left
	node is then compared. If it is smaller, the right node is
	compared. This techique continues until the record is found.

	(insert picture here)
	
Usage Example

    This is an example of how to use the library. It steps through the
    entire process for createing a TrunkTable class that uses the
    library for data access.
    
    Table Structure Design

	The first step is to design the data record and it's key. This
	is accomplished by creating a C++ structure.

	class TrunkTable
	{
	public:

	  struct Key {
	    short	nbrSwt;
	    short	nbrTnkGrpExt;
	  };

	  struct Rec : public Key
	  {
	    short   idnSwt;
	    char    abbOwnCom[ 9 ];
	    ...
	    char    indOsv[ 4 ];
	  };
	  
	  typedef HashSet< Rec, RecHash, RecLessKey >	Table;
	  typedef Table::const_iterator			const_iterator;
	  typedef Table::size_type			size_type;
	  typedef long					EffDate;
	};
	
    Table Creation

	The table is created by instaciating the class. You specific a
	file name and indicate that it should be created.

    Data Loading

	Normally, the data will have to be loaded from some outside
	source. This could be a combination of Sybase tables and/or 
	mainframe flat files.

	It is usually best to write a small application the reads the
	source records and updates the memory tables.
	
    Data Access

	Once the data has been loaded, the find method of the class is
	used to search for specific records in the table.

Library Status

    The library is currently being used for the new Traffic Lookup
    project. Most of the classes are fully documented and have
    complete regresion test written to verify them. The library will
    not be released for general use until all the classes are
    documented and tested.



#
# $Log$
# Revision 4.1  2001/07/27 00:57:39  houghton
# Change Major Version to 4
#
# Revision 2.1  1997/09/21 19:20:40  houghton
# Changed version to 2
#
# Revision 1.1  1997/08/10 20:36:26  houghton
# Initial Version.
#
#

# Local Variables:
# mode:indented-text
# End:
