#
#
# Title:        Classes.txt
# Project:	Mdb
# Desc:
# 
#   
# 
# Notes:
# 
# Author:	Paul A. Houghton - (paul.houghton@wcom.com)
# Created:	07/11/97 09:06
#
# Revision History: (See end of file for Revision Log)
#
#   Last Mod By:    $Author$
#   Last Mod:	    $Date$
#   Version:	    $Revision$
#
#   $Id$
#

MapFile

    MapFile uses the operating system's mapped memory functions
    (mmap(2) & munmap(2)) to map a file to memory. A file can be
    mapped to a specific memory address or the operating system can
    select the address to use (See libMdb/docs/design/MapFile.txt for
    more info).

    Documented Version: 2.10
    Tested Version: 2.10
    Current Version: (see MapFile.hh)
    
RBSet< class Key, class LessKey >

    The RBSet<> template class is a Red Black Binary Tree that can use
    mapped memory for data storage and access. It's interaface mimics
    the Standard C++ STL set<> template class. The only significant
    differance is the constructore which requires a MultiMemOffset
    object.

    Documented Version: 2.3
    Tested Version: 2.3 (100%)
    Current Version: (see RBSet.hh)
    
RBSet< class Key, class LessKey >

    This is a red black tree that uses a MulitMemOffset to store the
    data. 
    

MapMem.hh

    MapMem : public MapFile.

    This is the base class for both the MapMemFixedDynamic and
    MapMemDynamciDynamic classes.

MultiMemOffset

    This is and interface class that defines how a class allocates and
    releases chunks for data storage.

MultiMemOffsetMapDynamic
  MultiMemOffset

    This is a MultiMemOffset that uses a MapMemDynamic for data
    storage.

MapMemDynamic

    This is a mapped memory class that uses dynamic addresses.

MapMemDynamicDynamic
  MapMemDynamic
  
    This is a MapMemDynamic that manages dynamically sized chunks.

MapMemDynamicFixed
  MapMemDynamic

    This is a MapMemDynamic that manages fixed sized chunks.
    





Here is a short explination of the files included:

AvlTreeBase.hh

    This is a base class for balanced binary AVL trees.
    
AvlTreeOffsetBase.hh:

    AvlTreeOffsetBase : public AvlTreeBase

    This is the base class for AvlTreeOffset.

AvlTreeOffset.hh:

    AvlTreeOffset : public AvlTreeOffsetBase
    
    This template class provides an Avl Tree that
    does not use any memory addresses. All links are accomplished with
    offsets.

MapFile.hh:

    This class provides a basic interaface to Unix's mapped memory
    functions. It uses the mmap and munmap system calls.

MapMem.hh

    MapMem : public MapFile.

    This is the base class for both the MapMemFixedDynamic and
    MapMemDynamciDynamic classes.

MapMemDynamciDynamci.hh

    MapMemDynamciDynamc : public MapMem

    This class provides a managed mapped memory region that dyanmic
    sized chunks can be allocated and deallocated from.

MapMemFixedDynamic.hh

    MapMemFixedDynamic : public MapMem

    This class provides a managed mapped memory region that fixed
    sized chunks can be allocated and deallocated from.

MultiMem.hh
MultiMemOffset.hh
MultiMemOffsetMapFixed.hh

    These classes are used by the AvlTreeOffset class to access the
    MapMemFixedDynamic class.


MultiKeyData.C

    This is an incomplete example that uses AvlTreeOffset and
    MapMemDynamicDynamic to create a multi key'd data set.

StaticFixed.C

    This incomplete example shows how MapFile can be used directly to
    create a fixed data set that can be accessed as an array.

src/

    This directory contains the primary sources for the Mapped Memory
    classes.

examples/

    This direcory contains examples of AvlTreeOffset & MapMem usage from other
    projects. 
    
    

#
# $Log$
# Revision 1.2  1997/07/25 13:39:45  houghton
# *** empty log message ***
#
# Revision 1.1  1997/07/11 17:36:25  houghton
# Initial Version.
#
#

# Local Variables:
# mode:indented-text
# End:
